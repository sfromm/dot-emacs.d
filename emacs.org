#+TITLE: Emacs configuration
#+AUTHOR: Stephen Fromm

* Emacs Configuration
  
** About this file
<<babel-init>>

This is my Emacs configuration (mostly) maintained in one file, that is
kept organized with *org-mode*. It is inspired from a variety of
sources, including (in no particular order):

- [[http://sachachua.com/blog/][Sacha Chua]]'s [[http://sachac.github.io/.emacs.d/Sacha.html][emacs configuration]]
- [[http://doc.norang.ca/org-mode.html][Bernt Hansen (norang.ca) Org Mode]] (Organize Your Life in Plain Text)
- [[http://eschulte.github.io/emacs24-starter-kit/][Emacs Starter Kit]]
- [[http://www.wisdomandwonder.com/wordpress/wp-content/uploads/2014/03/C3F.html][Creation and conservation of computer files]], and later [[https://github.com/grettke/home/blob/master/ALEC.org][ALEC]]
- [[http://kitchingroup.cheme.cmu.edu/blog/][John Kitchin]]'s [[https://github.com/jkitchin/jmax][emacs configuration]]
- [[http://www.djcbsoftware.nl/dot-emacs.html][DJCB (EmacsWiki)]]
- [[https://github.com/bzg/dotemacs/blob/master/emacs.el][Bastien Guerry]]
- [[https://github.com/larstvei/dot-emacs][Lars Tveito]]
- [[https://github.com/purcell/emacs.d][Steve Purcell]]
- [[http://zeekat.nl/articles/making-emacs-work-for-me.html][Making Emacs work for me]]
- [[https://github.com/howardabrams/dot-files][Howard Abrams]]
- [[https://github.com/jd/emacs.d][Julien Danmmjou]]
- [[https://github.com/jwiegley/dot-emacs][John Wiegley]]
- [[https://github.com/joedicastro/dotfiles/tree/master/emacs][Joe Di Castro]]
- [[http://org.rix.si/][Ryan Rix]]'s [[http://doc.rix.si/cce/cce.html][Complete Computing Environment]] (formerly [[http://doc.rix.si/org/fsem.html][Hardcore Freestyle Emacs]] [[http://fort.kickass.systems:10082/cgit/personal/rrix/pub/fsem.git/tree/fsem.org][org source]]) 
- [[https://github.com/abelardojarab/emacs-config][Abelardo Jara-Berrocal]]
- [[https://writequit.org][Lee Hinman]]'s [[https://writequit.org/eos/eos.html][Emacs Operating System]] (see https://github.com/dakrone/eos)
- [[http://karl-voit.at/][Karl Voit]]'s [[https://github.com/novoid/dot-emacs][dot-emacs]]

Embedding Emacs configuration in *org-mode* is heavily inspired by the
ideas in [[http://en.wikipedia.org/wiki/Literate_programming][Literate Programming]].

This will hopefully lend itself better to explain and track why I
use different elements in my configuration, including discussion,
comments, todo items, and so on.

The first time this file is loaded, it will take awhile to install the
miscellaneous packages.  This will not be an issue the second time you
start Emacs with this configuration.

*** License

#+BEGIN_SRC 
Copyright (C) 2014-2017 Stephen Fromm

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3
or any later version published by the Free Software Foundation;
with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.

Code in this document is free software: you can redistribute it
and/or modify it under the terms of the GNU General Public
License as published by the Free Software Foundation, either
version 3 of the License, or (at your option) any later version.

This code is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
#+END_SRC

This document is licensed under the GNU Free Documentation License
version 1.3 or later (http://www.gnu.org/copyleft/fdl.html).

** Set up init.el

First thing's first: a base config is needed in =~/.emacs.d/init.el=.
Remember to keep this simple.  :-)

#+BEGIN_SRC emacs-lisp  :tangle no
(package-initialize)
(require 'package)
(require 'org)
(require 'ob-tangle)

; update load path to pull in tangled configs
(add-to-list 'load-path "~/.emacs.d/site-lisp")

; load up the bulk of my configuration
(org-babel-load-file (concat user-emacs-directory "emacs.org"))
#+END_SRC

** Core

Pull in core module that defines lots of helper functions, ELPA,
use-package, and so on.  See [[file:setup-core.org][setup-core.org]].

#+BEGIN_SRC emacs-lisp
(require 'setup-core)
#+END_SRC

** Packages

This section defines all the packages I use.  It installs (if needed)
and configures them per my usage.  Sections will come and go.

[[https://github.com/emacs-tw][emacs-tw]] has an interesting page, titled [[https://github.com/emacs-tw/awesome-emacs][awesome emacs]], that organizes
different packages available for Emacs by subject.  This can be a useful
resource when looking for specific functionality or to check in on
occasionally.

*** Emacs vi emulation

Pull in [[file:emacs-vi.org][emacs-vi.org]] ...

#+BEGIN_SRC emacs-lisp
(require 'setup-vi)
#+END_SRC

*** BBDB

[[http://bbdb.sourceforge.net/bbdb.html][BBDB]], the Big-Brother Database.  Useful resources: [[http://www.emacswiki.org/emacs/CategoryBbdb][emacswiki]] and [[http://sachachua.com/blog/category/geek/emacs/bbdb/][Chua]].

#+BEGIN_SRC emacs-lisp
  (dolist (p '(bbdb bbdb-ext bbdb-vcard))
    (progn (sf/package-install p)))
  (use-package bbdb
    :init
    (progn
      (bbdb-initialize 'message)
      (setq bbdb-file (concat user-emacs-directory "user/bbdb"))
      (add-hook 'gnus-startup-hook 'bbdb-insinuate-gnus)
      (bbdb-insinuate-message)
      (add-hook 'bbdb-change-hook 'bbdb-timestamp)
      (add-hook 'bbdb-create-hook 'bbdb-creation-date)
      )
    )

#+END_SRC

*** Bookmarks

Bookmarks are a way to jump to files and other things.  They are saved
to =~/.emacs.d/bookmarks=. 

| Keybinding  | Command                                 |
|-------------+-----------------------------------------|
| C-x r m     | Set bookmark for visited file, at point |
| C-x r b BMK | Jump to bookmark named BMK              |
| C-x r l     | List all bookmarks                      |

[[http://oremacs.com/2015/01/06/rushing-headlong/][headlong]]: 

#+BEGIN_SRC emacs-lisp
(use-package headlong
  :ensure headlong
 )
#+END_SRC

[[http://www.emacswiki.org/emacs/BookmarkPlus][Bookmark+]]:

#+BEGIN_SRC emacs-lisp
(use-package bookmark+
  :ensure bookmark+
  )
#+END_SRC

*** Diminish

Use =diminish= to clean up clutter on the modeline.  =use-package= has a
built-in mechanism to diminish a mode.

#+BEGIN_SRC emacs-lisp
(sf/package-install 'diminish)
#+END_SRC

*** Ediff

I am fairly used to *vimdiff*'s behavior.  I haven't had lots of
opportunities to familiarize myself with *ediff*, but the following
kinda-sorta helps.

#+BEGIN_SRC emacs-lisp
  (setq ediff-split-window-function 'split-window-horizontally)
  (setq ediff-window-setup-function 'ediff-setup-windows-plain)
#+END_SRC

*** Elfeed

Use [[https://github.com/skeeto/elfeed][elfeed]] as RSS feed reader.  See [[file:emacs-elfeed.org][emacs-elfeed.org]] ...

#+BEGIN_SRC emacs-lisp
(require 'setup-elfeed)
#+END_SRC

*** Emacsclient and server

This allows you to start a single Emacs process and then connect to it
via =emacsclient=.  In general, be sure to use =emacsclient -n= tells
=emacsclient= to not wait for the server to return.

#+BEGIN_SRC emacs-lisp
  (load "server")
  (unless (server-running-p) (server-start))
#+END_SRC

*** Instant messaging

Pull in [[file:emacs-chat.org][emacs-chat.org]] ...

#+BEGIN_SRC emacs-lisp
(require 'setup-chat)
#+END_SRC

*** Git

Pull in [[file:emacs-git.org][emacs-git.org]] ...

#+BEGIN_SRC emacs-lisp
(require 'setup-git)
#+END_SRC

*** Ledger

[[http://www.ledger-cli.org/][Ledger]] is a double entry accounting system that can be used from the CLI
and from Emacs.  There is also a Haskell port, [[http://hledger.org/][hledger]], that is
compatible with ledger.  Hledger also has support for a web daemon that
may make data entry simpler.

- [[http://www.ledger-cli.org/3.0/doc/ledger3.html][Ledger 3 Documentation]]
- [[http://www.ledger-cli.org/3.0/doc/ledger-mode.html][Ledger Mode]]

#+BEGIN_SRC emacs-lisp
  (use-package ledger-mode
    :ensure t)
#+END_SRC

*** Mode line

Pull in module [[file:setup-modeline.org][setup-modeline.org]] ...

#+BEGIN_SRC emacs-lisp
(require 'setup-modeline)
#+END_SRC

*** Music 

[[https://github.com/pft/mingus][Mingus]] is a frontend for Emacs to the Music Player Daemon (MPD).  The
says it is meant to resemble /ncmpc/.

#+BEGIN_SRC emacs-lisp
(use-package mingus
  :ensure t)
#+END_SRC

*** Navigation

Pull in the navigation menu.  See [[file:setup-navigation.org][setup-navigation.org]].

#+BEGIN_SRC emacs-lisp
(require 'setup-navigation)
#+END_SRC

*** Org Mode

 Pull in the awesome [[http://orgmode.org/][org mode]].  See [[file:emacs-org.org][emacs-org.org]] ...

 #+BEGIN_SRC emacs-lisp
 (require 'setup-org)
 #+END_SRC

*** Paradox
[[https://github.com/Malabarba/paradox][Paradox]] is a nice front-end to Emacs' package menu.  Among some of the
handy features:

| Shortcut | Action                           |
|----------+----------------------------------|
| v        | Visit package homepage           |
| l        | View list of recent commits      |
| f r      | Filter by regexp                 |
| f u      | Filter by packages with upgrades |
| f k      | Filter by keyword                |

#+BEGIN_SRC emacs-lisp
  (use-package paradox
    :ensure t
    :init
    (progn
      (setq paradox-execute-asynchronously t)
      (dolist (mode '(paradox-menu-mode paradox-commit-list-mode))
        (evil-set-initial-state mode 'emacs))
      )
    )
#+END_SRC

*** Passwords

Use [[https://www.passwordstore.org/][pass]] to store and manage passwords.  See [[file:emacs-pass.org][emacs-pass.org]] ...

#+BEGIN_SRC emacs-lisp
(require 'setup-pass)
#+END_SRC

*** Searching and Completion

**** Helm
    
[[https://github.com/emacs-helm/helm][Helm]] is an incremental completion and selectio narrowing framework for
Emacs.  It helps narrow your choices when searching for files, buffers,
commands, et cetera.

- [[http://tuhdo.github.io/helm-intro.html][Helm: A Package in a league of its own]]

| Keybinding | Command                           |
|------------+-----------------------------------|
| C-c ?      | Display help when in Helm session |
|            |                                   | 

The following rebinds *C-x c* to *C-c h* because the former is too close
to the command *C-x C-c*, *save-buffers-kill-terminal*.

#+BEGIN_SRC emacs-lisp
  (use-package helm
    :ensure helm
    :disabled t
    :diminish helm-mode
    :init
    (progn
      (require 'helm-config)
      (setq 
        helm-ff-skip-boring-files t
        helm-split-window-in-side-p t
        helm-ff-file-name-history-use-recentf t)
      (global-set-key (kbd "C-c h") 'helm-command-prefix)
      (global-unset-key (kbd "C-x c"))
      (helm-mode 1)
      (helm-autoresize-mode t))
    :config
      (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action)
    :bind (("M-x" . helm-M-x)
            ("C-x C-f" . helm-find-files)
            ("<f7>" . helm-recentf)
            ("C-x b" . helm-mini))
    )

#+END_SRC

**** IDO

A first crack at using [[http://www.emacswiki.org/InteractivelyDoThings][IDO]], aka /Interactively Do Things/.  Of
particular note, *ido-vertical-mode* is enabled again.

A few handy key-bindings when using IDO:

| Keybinding | Command                                       |
|------------+-----------------------------------------------|
| C-n        | move next through list                        |
| C-p        | move to previous in list                      |
| Tab        | display possible completion in buffer         |
| RET        | go down inside the directory in front of list |
| backspace  | go up to parent directory                     |
| //         | go to root directory                          |
| ~/         | go to home directory                          |
| C-f        | fall back to find file                        |
| C-d        | enter Dired for directory                     |
| C-j        | create new file named with text you entered   |
| C-b        | go back to buffer selection mode              |

[2015-02-09 Mon]: I disabled *ido* in favor of *helm*.

#+BEGIN_SRC emacs-lisp
  (use-package ido
    :disabled t
    :init
    (progn
      (use-package ido-vertical-mode
        :ensure t
        :disabled t
        :init (ido-vertical-mode 1))
      (use-package flx-ido
        :ensure flx-ido
        :disabled t
        :init (flx-ido-mode 1))
      (ido-mode 1)
      (ido-everywhere t)
      (setq
        ido-enable-flex-matching t
        ido-create-new-buffer 'always
        ido-use-faces nil
        ido-use-filename-at-point nil
        ido-auto-merge-work-directories-length 0))
    :bind (("<f7>" . recentf-open-files)
            ("C-x b" . ido-switch-buffer))
    )
#+END_SRC

Some possibly useful references:
- [[http://www.emacswiki.org/emacs/InteractivelyDoThings][EmacsWiki IDO]]
- [[http://www.masteringemacs.org/articles/2010/10/10/introduction-to-ido-mode/][Mastering Emacs: Introduction to IDO]]
- [[http://ergoemacs.org/emacs/emacs_buffer_switching.html][ErgoEmacs: Buffer switching]]

**** Smex

*Smex* is a ~M-x~ enhancement to recently and most frequently used
 commands.  It is typically used with *ido*.

#+BEGIN_SRC emacs-lisp
  (use-package smex
    :ensure smex
    :init (setq smex-completion-method 'ivy))
#+END_SRC

*** Snippets

[[https://github.com/capitaomorte/yasnippet][Yasnippet]] is a template system for Emacs.  You type an abbreviation and
yasnippet will automatically expand it into the template.  The
[[https://capitaomorte.github.io/yasnippet/][documentation]] is online.

To go with yasnippet, you may want to consider installing
[[https://github.com/AndreaCrotti/yasnippet-snippets][yasnippet-snippets]], a collection of snippets for different modes.

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :diminish yasnippet-minor-mode
    :init
    (progn
      (yas-global-mode 1)
      (add-hook 'term-mode-hook (lambda () "Disable yasnippet in terminal" (setq yas-dont-activate t)))
      )
    )
#+END_SRC
*** Eshell

Pull in [[file:emacs-eshell.org][emacs-eshell.org]] ...

#+BEGIN_SRC emacs-lisp
(require 'setup-eshell)
#+END_SRC

*** Tmux integration

[[https://github.com/syohex/emacs-emamux][Emamux]] allows you to interact with tmux from Emacs.  Should be
interesting to try, but have yet to hit on a use-case.

#+BEGIN_SRC emacs-lisp
  (use-package emamux
    :ensure emamux)
#+END_SRC

*** Twitter

Pull in [[file:emacs-twitter.org][emacs-twitter.org]] ...

#+BEGIN_SRC emacs-lisp
(require 'setup-twitter)
#+END_SRC

*** Web development

[[http://web-mode.org/][web-mode]] is an Emacs mode for editing web pages and templates, in
particular [[http://jinja.pocoo.org/][Jinja]].

#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :ensure t
    :init
    (progn
      (setq 
        web-mode-css-indent-offset 2
        web-mode-markup-indent-offset 2
        web-mode-code-indent-offset 2
        )
      (add-to-list 'auto-mode-alist '("\\.html\\'" . web-mode))
      ))
#+END_SRC

*** Window Management

[[https://github.com/abo-abo/ace-window][ace-window]] is a mechanism to quickly switch between windows in an Emacs
frame.

#+BEGIN_SRC emacs-lisp
  (use-package ace-window :ensure ace-window)
#+END_SRC

[[http://www.emacswiki.org/emacs/TransposeFrame][Transpose Frame]] is a utility to quickly transpose the arrangement of
windows in the current frame.

#+BEGIN_SRC emacs-lisp
  (use-package transpose-frame :ensure transpose-frame)
#+END_SRC

** General configuration

And finally, we get to general configuration of Emacs.  ;-)

*** Basics

Use UTF-8 as the default locale.

#+BEGIN_SRC emacs-lisp
(prefer-coding-system 'utf-8)
#+END_SRC

Define format for line numbers on the side, when *linum-mode* is
enabled.

#+BEGIN_SRC emacs-lisp
(setq linum-format "%4d")
#+END_SRC

Turn on highlighting of current line.  See Emacs manual on [[http://www.gnu.org/software/emacs/manual/html_node/emacs/Cursor-Display.html][Cursor Display]].

#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode 1)
#+END_SRC

Skip the splash screen ...

#+BEGIN_SRC emacs-lisp
(setq inhibit-splash-screen t)
#+END_SRC

*** Backups

By default, Emacs will save backup files in the current directory.  This
will litter =~= files everywhere.  The following will store them in
=~/.emacs.d/backups=.  If need be, they can be found via =C-x C-f
(find-file)=.

This will keep a large number of backups.  =delete-old-versions= will
prevent trimming of backup versions.  =version-control= makes numeric
backup versions unconditionally.  Lastly, =auto-save-file-name-transforms=
will make filenames unique when saved in the backup directory.

#+BEGIN_SRC emacs-lisp
  (defvar sf/emacs-autosave-directory
    (concat user-emacs-directory "backups/")
    "This variable dictates where to put auto saves. It is set to a
      directory called backups located in your .emacs.d/ directory.")

  (setq
    backup-directory-alist `((".*" . ,sf/emacs-autosave-directory))
    auto-save-file-name-transforms `((".*" ,sf/emacs-autosave-directory t))
    delete-old-versions -1
    version-control t
    )
#+END_SRC

*** Saving and History

Save commands and their history.

#+BEGIN_SRC emacs-lisp
  (setq savehist-file "~/.emacs.d/savehist")
  (savehist-mode 1)
  (setq savehist-save-minibuffer-history 1)
  (setq savehist-additional-variables
    '(kill-ring search-ring regexp-search-ring))
#+END_SRC

The following will control [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Auto-Save-Control.html][auto-save]] behavior.

#+BEGIN_SRC emacs-lisp
  (setq auto-save-timeout 120)
  (setq auto-save-interval 1000)
#+END_SRC

On Emacs 21 or later, you can instruct Emacs to make the script
executable when saving.

#+BEGIN_SRC emacs-lisp
(add-hook 'after-save-hook 'executable-make-buffer-file-executable-if-script-p)
#+END_SRC

With Emacs 24.4, the following will allow you to use the
_focus-out-hook_ for different things.  My preference here is to
instruct Emacs to save buffers.

#+BEGIN_SRC emacs-lisp
  (when (version<= "24.4" emacs-version)
    (add-hook 'focus-out-hook 'sf/save-all))
#+END_SRC

Some sort of alternative would be nice.  I tried
=mouse-leave-buffer-hook=, but that fires more often than I'd like.  It
is important to remember that buffer != X11 window.  The old idea of
running =sf/save-all= on a schedule is not that great either.

#+BEGIN_SRC emacs-lisp
;;  (add-hook 'mouse-leave-buffer-hook 'sf/save-all)
#+END_SRC

Lastly, enable *undo-tree-mode*.  You can visualize the changes with
=C-x u= (=undo-tree-visualize=).

#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :defer t
    :diminish undo-tree-mode
    :init
    (progn
      (global-undo-tree-mode)
      (setq
        undo-tree-visualizer-timestamps t
        undo-tree-visualizer-diff t)
      )
    )
#+END_SRC

*** Appearance

**** Themes

This installs and enables an Emacs theme.  I try out different themes on
a regular basis, but have been partial to [[http://ethanschoonover.com/solarized][Solarized]] for a long time.
More about Emacs themes can be read in the manual on [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Custom-Themes.html][custom-themes]].
This defines the default theme, which is then loaded below.

#+BEGIN_SRC emacs-lisp
  (dolist (p '(leuven-theme
                material-theme
                solarized-theme
                spacemacs-theme
                zenburn-theme
                professional-theme))
    (progn (sf/package-install p)))
  (defvar sf/gui-theme nil "Preferred graphics theme")
  (setq sf/gui-theme 'material)
#+END_SRC

More information about themes can be found at EmacsWiki:

http://www.emacswiki.org/emacs/ColorTheme

This includes installing a theme for one buffer (=M-x
color-theme-buffer-local=) or for a specific frame.  You can also toggle
between day/night (light/dark) themes.

**** Fonts

#+BEGIN_SRC emacs-lisp
(require 'setup-fonts)
#+END_SRC

**** General appearance items

If using Emacs in server mode, the following function wraps things to do
when creating a frame.

#+BEGIN_SRC emacs-lisp
  (defun sf/look-feel ()
    "Set up look and feel"
    (interactive)
    (when (display-graphic-p)
      (sf/font-update)
      (tool-bar-mode -1)
      (scroll-bar-mode -1)
      (load-theme sf/gui-theme t))
    )
#+END_SRC

A few things when in graphical mode:
- Disable the toolbar and scroll bar.
- Install [[https://julien.danjou.info/projects/emacs-packages][rainbow mode]] to /colorize color names in buffers/.
- Run ~sf/look-feel~.

#+BEGIN_SRC emacs-lisp
  (sf/package-install 'rainbow-mode)
  (when (display-graphic-p)
    (sf/look-feel))
#+END_SRC

Activate syntax highlighting.  See [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Font-Lock.html][Font Lock]] in the Emacs manual.

#+BEGIN_SRC emacs-lisp
  (require 'font-lock)
  (global-font-lock-mode 1)
  (setq font-lock-use-default-colors t)
#+END_SRC

Add some information to the mode line: line, column, battery remaining,
and the time.

#+BEGIN_SRC emacs-lisp
  (setq line-number-mode t)
  (setq column-number-mode t)
  (setq display-battery-mode t)
  (setq display-time-24hr-format t)
  (display-battery-mode)
#+END_SRC

**** DONE Use ~after-make-frame-functions~ if using emacsclient
     CLOSED: [2015-04-06 Mon 20:10]

If I start Emacs via ~emacs --server~, I still want the frame to have
the right look when I invoke =emacsclient=.  Something like:

#+BEGIN_SRC emacs-lisp
  (if (daemonp)
    (add-hook 'after-make-frame-functions
      (lambda (frame)
        (select-frame frame)
        (sf/look-feel))
      )
    )
#+END_SRC

*** Behavior

**** Buffers

Use =uniquify= to make two (or more) buffers open with the same file
name distinguishable.  The configuration below tries to best match the
full path name.  Try to ignore special buffers.

#+BEGIN_SRC emacs-lisp
(require 'uniquify)
(setq 
  uniquify-buffer-name-style 'forward
  uniquify-separator "/"
  uniquify-ignore-buffers-re "^\\*"
  uniquify-after-kill-buffer-p t)
#+END_SRC

- [2015-03-04 Wed] Drop [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Iswitchb.html][iswitchb]] as it is deprecated.

**** Windows

I used to use _switch-window_ to navigate between windows.  Nowadays, I
use either =helm= or the =hydra= below.

#+BEGIN_SRC emacs-lisp
  (sf/package-install 'switch-window)
  ;; (use-package switch-window
  ;;   :bind ("C-x o" . switch-window)
  ;;   :init
  ;;   (progn (setq switch-window-shortcut-style 'alphabet)))
#+END_SRC

This is my preferred mechanism to navigate between windows.  It uses
=hydra=, =ace-window=, and =windmove= (among others).  This is taken
from [[http://oremacs.com/2015/02/04/pre-hydra-post/][oremacs.com]].

#+BEGIN_SRC emacs-lisp
  (global-set-key
    (kbd "C-M-o")
    (defhydra hydra-window ()
      "window"
      ("h" windmove-left)
      ("j" windmove-down)
      ("k" windmove-up)
      ("l" windmove-right)
      ("v" (lambda ()
             (interactive)
             (split-window-right)
             (windmove-right)) "vert")
      ("x" (lambda ()
             (interactive)
             (split-window-below)
             (windmove-down)) "horz")
      ("t" transpose-frame "'")
      ("o" delete-other-windows "one" :color blue)
      ("a" ace-window "ace" :color blue)
      ("s" ace-swap-window "swap")
      ("d" ace-delete-window "del")
      ("i" ace-maximize-window "ace-one" :color blue)
      ("b" ido-switch-buffer "buf")
      ("m" headlong-bookmark-jump "bmk")
      ("q" nil "cancel")))
#+END_SRC

I'm not using =ace-jump= at this time.

#+BEGIN_SRC emacs-lisp
;  (sf/package-install 'ace-jump-mode)
#+END_SRC

**** Mouse

The following tries to smooth out mouse scrolling so that it isn't so
jumpy.  There are a couple references:

- http://www.emacswiki.org/emacs/SmoothScrolling
- http://stackoverflow.com/questions/3631220/fix-to-get-smooth-scrolling-in-emacs

#+BEGIN_SRC emacs-lisp
(setq 
  scroll-step 1               ;; keyboard scroll one line at a time
  scroll-conservatively 10000
  scroll-preserve-screen-position 1
  mouse-wheel-follow-mouse 't ;; scroll window under mouse
  mouse-wheel-progressive-speed nil     ;;  don't accelerate scrolling
  mouse-wheel-scroll-amount '(1 ((shift) . 5)
                                    ((control)))
)
#+END_SRC

+Autoselect the window with the mouse pointer.  This is effectively
/focus-follows-mouse/, but for windows in an Emacs frame.+

#+BEGIN_SRC emacs-lisp
(setq mouse-autoselect-window nil)
#+END_SRC

**** General 

In general, use spaces instead of tabs.

#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil)
#+END_SRC

**** DONE Making opening files easier
     CLOSED: [2014-05-06 Tue 09:17]

Emacs provides a mode called [[https://www.gnu.org/software/emacs/manual/html_node/emacs/File-Conveniences.html][recentf-mode]] that will track files you
open.  When you call =recentf-open-files=, it will present a numbered
list and you can then select the file to open.  [[http://ergoemacs.org/][ErgoEmacs]] also discusses
how to configure [[http://ergoemacs.org/emacs/emacs_recentf.html][recentf-mode]].

The following enables =recentf-mode= and binds *F7* to =ivy-recentf=.
It also limits the maximum number of items in the =recentf= menu.

#+BEGIN_SRC emacs-lisp
  (use-package recentf
    :init
    (progn
      (setq
        recentf-max-menu-items 50
        recentf-exclude '("COMMIT_MSG" "COMMIT_EDITMSG")
        )
      )
    :bind ("<f7>" . ivy-recentf)
    )
#+END_SRC

**** Helpers

Define a hydra to start/switch to applications or trigger miscellaneous actions.

#+BEGIN_SRC emacs-lisp
  (global-set-key
    (kbd "<f9>")
    (defhydra hydra-app-selector (:color blue
                                   :columns 5)
      "Action"
      ("e" mu4e "email")
      ("f" elfeed "elfeed")
      ("t" twit "twitter")
      ("j" sf/jabber-start-or-switch "jabber")
      ("g" magit-status "magit")
      ("m" mingus "music")
      ("s" eshell "shell")
      ("p" paradox-list-packages "packages")
      ("u" browse-url "open url")
      )
    )
#+END_SRC

A function to insert an [[http://www.theatlantic.com/technology/archive/2014/05/the-best-way-to-type-__/371351/][existential shrug]].

#+BEGIN_SRC emacs-lisp
(defun sf/shrug () "Shrug emoji" (interactive) (insert "¯\\_(ツ)_/¯"))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun sf/glare () "Glare emoji" (interactive) (insert "ಠ_ಠ"))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun sf/table-flip () "Table fip emoji" (interactive) (insert "(╯°□°）╯︵ ┻━┻"))
#+END_SRC

** Programming and Editing

Define how emacs behavior for programming and editing.  See
[[file:setup-programming.org][setup-programming.org]] ...

#+BEGIN_SRC emacs-lisp
  (require 'setup-programming)
#+END_SRC

** Mail configuration

Use [[https://www.djcbsoftware.nl/code/mu/mu4e.html][mu4e]] as email client.  See [[file:emacs-mail.org][emacs-mail.org]] ...

#+BEGIN_SRC emacs-lisp
(require 'setup-mail)
#+END_SRC

** Le Fin

The end.  Send a message so that the user knows it has been completely
loaded.

#+BEGIN_SRC emacs-lisp
(message "%s" "Finished loading config")
#+END_SRC

#+PROPERTY: tangle ~/.emacs.d/emacs.el
#+OPTIONS: toc:4 h:4
