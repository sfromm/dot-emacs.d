#+TITLE: Emacs configuration
#+AUTHOR: Stephen Fromm
#+OPTIONS: toc:4 h:4

* Emacs Configuration
  
** About this file
<<babel-init>>

This is my Emacs configuration (mostly) maintained in one file, that is
kept organized with *org-mode*. It is inspired from a variety of
sources, including (in no particular order):

- [[http://sachachua.com/blog/][Sacha Chua]]'s [[http://sachac.github.io/.emacs.d/Sacha.html][emacs configuration]]
- [[http://doc.norang.ca/org-mode.html][Bernt Hansen (norang.ca) Org Mode]] (Organize Your Life in Plain Text)
- [[http://eschulte.github.io/emacs24-starter-kit/][Emacs Starter Kit]]
- [[http://www.wisdomandwonder.com/wordpress/wp-content/uploads/2014/03/C3F.html][Creation and conservation of computer files]], and later [[https://github.com/grettke/home/blob/master/ALEC.org][ALEC]]
- [[http://kitchingroup.cheme.cmu.edu/blog/][John Kitchin]]'s [[https://github.com/jkitchin/jmax][emacs configuration]]
- [[http://www.djcbsoftware.nl/dot-emacs.html][DJCB (EmacsWiki)]]
- [[http://bzg.fr/emacs.html][Bastien Guerry]]
- [[https://github.com/larstvei/dot-emacs][Lars Tveito]]
- [[https://github.com/purcell/emacs.d][Steve Purcell]]
- [[http://zeekat.nl/articles/making-emacs-work-for-me.html][Making Emacs work for me]]
- [[https://github.com/howardabrams/dot-files][Howard Abrams]]
- [[https://github.com/jd/emacs.d][Julien Danjou]]
- [[https://github.com/joedicastro/dotfiles/tree/master/emacs][Joe Di Castro]]
- [[http://org.rix.si/][Ryan Rix]]'s [[http://doc.rix.si/cce/cce.html][Complete Computing Environment]] (formerly [[http://doc.rix.si/org/fsem.html][Hardcore Freestyle Emacs]] [[http://fort.kickass.systems:10082/cgit/personal/rrix/pub/fsem.git/tree/fsem.org][org source]]) 

Embedding Emacs configuration in *org-mode* is heavily inspired by the
ideas in [[http://en.wikipedia.org/wiki/Literate_programming][Literate Programming]].

This will hopefully lend itself better to explain and track why I
use different elements in my configuration, including discussion,
comments, todo items, and so on.

*** License

#+BEGIN_SRC 
Copyright (C) 2014-2015 Stephen Fromm

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3
or any later version published by the Free Software Foundation;
with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.

Code in this document is free software: you can redistribute it
and/or modify it under the terms of the GNU General Public
License as published by the Free Software Foundation, either
version 3 of the License, or (at your option) any later version.

This code is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
#+END_SRC

This document is licensed under the GNU Free Documentation License
version 1.3 or later (http://www.gnu.org/copyleft/fdl.html).

** Set up init.el

First thing's first: a base config is needed in =~/.emacs.d/init.el=.
Remember to keep this simple.  :-)

#+BEGIN_SRC emacs-lisp  :tangle no
(package-initialize)
(require 'package)
(require 'org)
(require 'ob-tangle)

; load up private configuration
(if (file-exists-p (concat user-emacs-directory "private.org"))
  (org-babel-load-file (concat user-emacs-directory "private.org"))
  )

; load up the bulk of my configuration
(org-babel-load-file (concat user-emacs-directory "emacs.org"))
#+END_SRC

** Personal information

Set my name.  =user-mail-address= is defined in /private.org/.

#+BEGIN_SRC emacs-lisp
(setq user-full-name "Stephen Fromm")
#+END_SRC

** Emacs initialization

The first time this file is loaded, it will take awhile to install the
miscellaneous packages.  This will not be an issue the second time you
start Emacs with this configuration.

*** Add package sources

Use =M-x package-refresh-contents= to reload the list of packages
after adding these for the first time.

MELPA is probably the more popular package repository.  It also has lots
of packages compared to other repositories.  Be aware that MELPA uses
snapshots instead of 'stable' releases.

- [2014-05-16 Fri] [[http://emacsredux.com/blog/2014/05/16/melpa-stable/][Turns out]] that there is also a [[http://melpa-stable.milkbox.net/#/][MELPA stable]].  I
  should add that to the =package-archive= list.

#+BEGIN_SRC emacs-lisp
  (setq package-archives '(
                           ("org" . "http://orgmode.org/elpa/")
                           ("melpa" . "http://melpa.org/packages/")
                           ("gnu" . "http://elpa.gnu.org/packages/")
                           ("marmalade" . "http://marmalade-repo.org/packages/")
                           ("e6h" . "http://www.e6h.org/packages/")
                           ))
  (package-initialize)
  (require 'package)
#+END_SRC

*** Install packages if necessary

ELPA provides a nice resource to install packages.  The following
function facilitates installing packages from ELPA.  It will refresh the
package database before trying to install a package.

Further down, I also use the feature from =use-package= where it can
install a package.

#+BEGIN_SRC emacs-lisp
(defun sf/package-install (package)
  "Install PACKAGE it not yet installed."
  (unless (package-installed-p package)
    (message "%s" "Refreshing package database...")
    (package-refresh-contents)
    (message "%s" " done.")
    (package-install package)
    (delete-other-windows)))
#+END_SRC

*** Define lisp directories and Use use-package

The following directories have lisp files that I will user later on.
Best to load them now.

#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/site-lisp")
#+END_SRC

[[https://github.com/jwiegley/use-package][use-package]] is a declaration macro that allows you to isolate package
configuration in your Emacs configuration.  This [[http://ericjmritz.name/2013/11/25/simplify-emacs-configuration-with-use-package/][page]] provides an
example of how to use =use-package=.  Don't forget the [[https://github.com/jwiegley/use-package/blob/master/README.md][documentation]] for
*use-package*.

#+BEGIN_SRC emacs-lisp
(sf/package-install 'use-package)
(require 'use-package)
#+END_SRC

*** Funtions and other building blocks

Pull in some packages that will be useful later.

#+BEGIN_SRC emacs-lisp
  (require 'cl)
#+END_SRC

Define a function that will switch to the last used buffer.

#+BEGIN_SRC emacs-lisp
  (defun sf/switch-to-last-buffer ()
    (interactive)
    (switch-to-buffer (other-buffer (current-buffer) 1)))
#+END_SRC

Save all buffers and then run =depot-sync.sh=.

#+BEGIN_SRC emacs-lisp
  (defun sf/save-all ()
    (interactive)
    (progn
      (message "Saving buffers at %s" (format-time-string "%Y-%m-%dT%T"))
      (save-some-buffers t)
      (with-temp-buffer (async-shell-command "depot-sync.sh" t))
      ))
#+END_SRC

Define function that will disable =global-linum=.

#+BEGIN_SRC emacs-lisp
  (defun sf/nolinum ()
    "Disable global-linum-mode"
    (global-linum-mode 0))
#+END_SRC

Function to create a full ISO 8601 format timestamp.

#+BEGIN_SRC emacs-lisp
  (defun sf/timestamp ()
    "Insert full ISO 8601 format timestamp"
    (interactive)
    (insert (format-time-string "%Y-%m-%dT%T%z")))
#+END_SRC

Toggle whitespace cues.

#+BEGIN_SRC emacs-lisp
  (defun sf/whitespace ()
    "Enable whitespace visualizations"
    (setq highlight-tabs t)
    (setq show-trailing-whitespace t))
#+END_SRC

While it is pretty straightforward to update packages via
~list-packages~ (via ~U x~), the following function makes it perhaps a
little easier.

#+BEGIN_SRC emacs-lisp
  (defun sf/update-packages ()
    "update all installed packages"
    (interactive)
    (save-window-excursion
      (package-refresh-contents)
      (package-list-packages t)
      (package-menu-mark-upgrades)
      (package-menu-execute t)
      (message "packages updated")
      )
    )
#+END_SRC

Via http://ergoemacs.org/emacs/elisp_read_file_content.html:

#+BEGIN_SRC emacs-lisp
  (defun get-string-from-file (path)
    "Return file content of path"
    (with-temp-buffer
      (insert-file-contents path)
      (buffer-string)))
#+END_SRC

The following function sets the =GPG_AGENT_INFO= environment variable.

#+BEGIN_SRC emacs-lisp
  (defun sf/set-gpg-env ()
    "Set GPG_AGENT_INFO environmental variable"
    (interactive)
    (setenv "GPG_TTY" (terminal-name))
    (setenv "GPG_AGENT_INFO" (concat
                               (expand-file-name "~/.gnupg/S.gpg-agent")
                               ":"
                               (replace-regexp-in-string "\n$" ""
                                 (shell-command-to-string "pgrep gpg-agent"))
                               ":1")
      )
    )
#+END_SRC

This is a helper function to call all functions that set an environment
variable.

#+BEGIN_SRC emacs-lisp
  (defun sf/set-env-vars ()
    "Helper function to set environmental variables"
    (interactive)
    (sf/set-gpg-env)
    )
#+END_SRC

This helps with aligning code (or other text) by whitespace, taken from
[[http://pragmaticemacs.com/emacs/aligning-text/][Ben Maughn]].

#+BEGIN_SRC emacs-lisp
  (defun sf/align-whitespace (start end)
    "Align columns by whitespace"
    (interactive "r")
    (align-regexp start end "\\(\\s-*\\)\\s-" 1 0 t)
    )
#+END_SRC

And another one from [[http://pragmaticemacs.com/emacs/join-line-to-following-line/][Ben Maughn]], join current line to the following
line.

#+BEGIN_SRC emacs-lisp
  (defun sf/join-next-line ()
    "Join the next line with the current line."
    (interactive)
    (join-line -1)
    )
  (global-set-key (kbd "M-j") 'sf/join-next-line)
#+END_SRC

A series of functions from [[https://github.com/magnars/.emacs.d/blob/master/defuns/buffer-defuns.el][Magnars' buffer-defuns.el]].

#+BEGIN_SRC emacs-lisp
  (defun untabify-buffer ()
    "Remove tabs from buffer"
    (interactive)
    (untabify (point-min) (point-max))
    )
  (defun indent-buffer ()
    "Indent buffer"
    (interactive)
    (indent-region (point-min) (point-max))
    )
  (defun cleanup-buffer ()
    "Clean up whitespace in a buffer"
    (interactive)
    (untabify-buffer)
    (delete-trailing-whitespace)
    (indent-buffer)
    )
#+END_SRC

*** DONE Load encrypted secrets
    CLOSED: [2014-04-25 Fri 10:40]

<<emacs-secrets>>

The following uses [[http://www.gnu.org/software/emacs/manual/html_mono/epa.html][EasyPG Assistant]] for the encryption.  This enables
you to store secrets (aka passwords) in a separate, encrypted file that
is loaded when needed.

I updated this to be in a function so that it doesn't prompt right away
when starting Emacs.  This function can then be called by other parts as
needed.

#+BEGIN_SRC emacs-lisp
;  (eval-after-load 'erc
;    (progn
;      (load-file (concat user-emacs-directory "secrets.el.gpg"))
;    ))
#+END_SRC

The following was a helpful resource when setting this up.

http://emacs-fu.blogspot.com/2011/02/keeping-your-secrets-secret.html

- [2015-03-12 Thu] I don't really use this anymore.  For passwords, I
  use an encrypted /authinfo/.  For /private.org/, I maintain that
  separately.

**** CANCELLED Consider using =gpg-agent= and public key encryption
     CLOSED: [2015-03-12 Thu 19:02]

**** CANCELLED Consider loading secrets file on demand
     CLOSED: [2015-03-12 Thu 19:02]

** Org mode

[[http://orgmode.org/][Org mode]] is a big reason why I've switched back to Emacs.  I use it for
taking notes, tracking projects and todo items, and other miscellaneous
items.

The following does lots of things:

- Enable spell-check when in *org-mode*.
- Define the default =org-directory=.
- Make agenda views /sticky/ via =org-agenda-sticky=.  This basically
  means that when you switch to _org-agenda_, Emacs will switch to the
  _org-agenda_ buffer but not refresh it.  You need to manually refresh
  it by hand with _r_ or _g_.
- Define where to capture notes (=org-default-notes-file=) and the
  templates to use (=org-capture-templates=).
- Note when a task is rescheduled.
- This defines some basics like where and what files with
  =org-agenda-files=.
- Use the current window when invoking =org-agenda=.
- And, just in case, restore windows after quitting =org-agenda=.
- Define =org-todo-keywords=.  This is discussed in the [[http://orgmode.org/manual/TODO-Items.html][manual]].

#+BEGIN_SRC emacs-lisp
  (use-package org
    :ensure org-plus-contrib
    :init
    (progn
      (add-hook 'org-mode-hook 'turn-on-auto-fill)
      (add-hook 'org-mode-hook '(lambda() (set-fill-column 72)))
      (add-hook 'org-mode-hook 'turn-on-flyspell 'append)
      (add-to-list 'auto-mode-alist '("doc/org/.*\\.org$" . org-mode))
      (setq
        org-directory "~/depot/doc/org"
        org-agenda-sticky t
        org-default-notes-file (concat org-directory "/journal.org")
        org-id-link-to-org-use-id 'create-if-interactive-and-no-custom-id
        org-log-done t
        org-completion-use-ido t
        org-log-reschedule "note"
        org-agenda-files (list
                           (concat org-directory "/journal.org")
                           (concat org-directory "/work.org")
                           (concat org-directory "/personal.org"))
        org-agenda-restore-windows-after-quit t
        org-agenda-window-setup 'current-window
        org-capture-templates '(
                                 ("j" "Journal" entry (file+datetree (concat org-directory "/journal.org"))
                                   "* %?%U\n")
                                 ("l" "Student log" entry (file (concat org-directory "/student.org"))
                                   "** %U %^{Name} %^{In|Out} %?")
                                 )
        org-file-apps (quote ((auto-mode . emacs)
                               ("\\.doc\\'" . "ooffice %s")
                               ("\\.docx\\'" . "ooffice %s")
                               ("\\.xlsx\\'" . "ooffice %s")
                               ("\\.pptx\\'" . "ooffice %s")
                               ("\\.pdf\\'" . default)))
        org-modules '(org-w3m org-bbdb
                       org-bibtex org-docview
                       org-gnus org-info
                       org-irc org-mhe org-rmail org-habit)
        org-src-window-setup 'current-window
        org-todo-keywords '(
                             (sequence "TODO(t)" "WAITING(w)" "DELEGATED(l)" "|" "DONE(d)")
                             (sequence "|" "CANCELLED(c)")
                             )
        )
      (org-load-modules-maybe t)
      )
    :bind (("<f8>" . org-cycle-agenda-files)
            ("<f12>" . org-agenda)
            ("C-c l" . org-store-link)
            ("C-c c" . org-capture)
            ("C-c a" . org-agenda)
            ("C-c b" . org-switchb))
    )
#+END_SRC

Finally, pull in *org-git-link* to reference git links.  More
information available [[http://orgmode.org/worg/org-contrib/org-git-link.html][here]].

#+BEGIN_SRC emacs-lisp
  (use-package org-git-link)
#+END_SRC

*** Contacts

Instead of tinkering with *BBDB*, which seemed to require more energy
than I want to commit, *[[https://julien.danjou.info/projects/emacs-packages#org-contacts][org-contacts]]* looks like a good alternative.
It is /org-ish/ which is also a plus.  If _org-contacts-files_ is not
set, *org-contacts* will search all your Org files.  Since I'm storing
contacts elsewhere, this needs to be set.

#+BEGIN_SRC emacs-lisp
  (use-package org-contacts
    :config
    (progn
      (setq org-contacts-files (list  "~/depot/doc/org/contacts.org"))
      (push '("c" "Contacts" entry (file (concat org-directory "/contacts.org"))
               "* %(org-contacts-template-name)
:PROPERTIES:
:EMAIL: %(org-contacts-template-email)
:PHONE:
:ADDRESS:
:BIRTHDAY:
:END:") org-capture-templates)
      )
    )
#+END_SRC

*** Pomodoro

The [[http://pomodorotechnique.com/][pomodoro technique]] is basically about time management.  You use a
timer to break down work into intervals, traditionally 25 minutes in
length, separated by short breaks.  The following installs
*org-pomodoro* and sets up hooks to do notifications.  It also overrides
the normal org-mode /clock-in/ and /clock-out/ functions.  These are
normally *org-clock-in* and *org-clock-out*.

#+BEGIN_SRC emacs-lisp
  (sf/package-install 'org-pomodoro)
  (global-set-key (kbd "C-c C-x C-i") 'org-pomodoro)
  (global-set-key (kbd "C-c C-x C-o") 'org-pomodoro)
  (defun sf/notify-pomodoro (title message)
    (notifications-notify
      :title title
      :body message
      :urgency 'low))

  (add-hook 'org-pomodoro-finished-hook
    (lambda ()
      (sf/notify-pomodoro "Pomodoro completed" "Time for a break")))

  (add-hook 'org-pomodoro-break-finished-hook
    (lambda ()
      (sf/notify-pomodoro "Break completed" "Ready for another?")))

  (add-hook 'org-pomodoro-long-break-finished-hook
    (lambda ()
      (sf/notify-pomodoro "Long break completed" "Ready for another?")))
#+END_SRC

*** Babel mode

This defines which languages are enabled for evaluation by org-babel.
[[http://ditaa.sourceforge.net/][ditaa]] allows creation of diagrams from Emacs.  May require using emacs
=artist-mode=.

#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
    'org-babel-load-languages
    '((ditaa . t)
      (emacs-lisp . t)
      (org . t)
      (perl . t)
      (python . t)
      (ruby . t)
      (sh . t)
      (calc . t)
     ))
#+END_SRC

You can type =C-c '= to edit the current code block.  This will bring up
a major-mode edit buffer containing the body of the code block.  You can
then use =C-c '= again to exit.

*** Exporting

One of the (many) nice features of org-mode is that you can export to
many different formats.  What follows is miscellaneous resources online
that discuss exporting.

- [[http://orgmode.org/manual/Exporting.html#Exporting][Org Mode Manual, Exporting]]
- [[http://orgmode.org/worg/org-contrib/babel/examples/article-class.html][Org-article LaTeX class]]
- [[http://home.fnal.gov/~neilsen/notebook/orgExamples/org-examples.html][Emacs org-mode examples and cookbook]]
- [[http://emacs-fu.blogspot.com/2011/04/nice-looking-pdfs-with-org-mode-and.html][Emacs Fu: Nice looking PDFs with org-mode and xetex]]

** Packages

This section defines all the packages I use.  It installs (if needed)
and configures them per my usage.  Sections will come and go.

[[https://github.com/emacs-tw][emacs-tw]] has an interesting page, titled [[https://github.com/emacs-tw/awesome-emacs][awesome emacs]], that organizes
different packages available for Emacs by subject.  This can be a useful
resource when looking for specific functionality or to check in on
occasionally.

*** Emacs vi emulation

I have too much Vim muscle memory to let go of the keybindings.  [[https://gitorious.org/evil/pages/Home][evil]]
provides an emulation mode that I find extremely useful.

While I have _<leader>_ configured, I don't use this as much as I used
to.  I typically use *helm* or *ido* for quickly changing between
buffers.

Lastly, this also sets the initial state of some modes to _emacs_ where
it makes sense.

#+BEGIN_SRC emacs-lisp
  (sf/package-install 'evil)
  (sf/package-install 'evil-leader)
  (use-package evil
    :init
    (progn
      (use-package evil-leader
        :init (global-evil-leader-mode)
        :config
        (progn
          ;; evil-leader
          (evil-leader/set-leader ",")
          (evil-leader/set-key
            "," 'sf/switch-to-last-buffer)))
      (evil-mode 1))
    :config
    (progn
      (dolist (mode '(bbdb-mode erc-mode fundamental-mode shell-mode calendar-mode message-mode special-mode ))
        (evil-set-initial-state mode 'emacs))
      ))
#+END_SRC

*** BBDB

[[http://bbdb.sourceforge.net/bbdb.html][BBDB]], the Big-Brother Database.  Useful resources: [[http://www.emacswiki.org/emacs/CategoryBbdb][emacswiki]] and [[http://sachachua.com/blog/category/geek/emacs/bbdb/][Chua]].

#+BEGIN_SRC emacs-lisp
  (dolist (p '(bbdb bbdb-ext bbdb-vcard))
    (progn (sf/package-install p)))
  (use-package bbdb
    :init
    (progn
      (bbdb-initialize 'message)
      (setq bbdb-file (concat user-emacs-directory "user/bbdb"))
      (add-hook 'gnus-startup-hook 'bbdb-insinuate-gnus)
      (bbdb-insinuate-message)
      (add-hook 'bbdb-change-hook 'bbdb-timestamp)
      (add-hook 'bbdb-create-hook 'bbdb-creation-date)
      )
    )

#+END_SRC

*** Bookmarks

Bookmarks are a way to jump to files and other things.  They are saved
to =~/.emacs.d/bookmarks=. 

| Keybinding  | Command                                 |
|-------------+-----------------------------------------|
| C-x r m     | Set bookmark for visited file, at point |
| C-x r b BMK | Jump to bookmark named BMK              |
| C-x r l     | List all bookmarks                      |

[[http://oremacs.com/2015/01/06/rushing-headlong/][headlong]]: 

#+BEGIN_SRC emacs-lisp
(use-package headlong
  :ensure headlong
 )
#+END_SRC

[[http://www.emacswiki.org/emacs/BookmarkPlus][Bookmark+]]:

#+BEGIN_SRC emacs-lisp
(use-package bookmark+
  :ensure bookmark+
  )
#+END_SRC

*** Diminish

Use =diminish= to clean up clutter on the modeline.  =use-package= has a
built-in mechanism to diminish a mode.

#+BEGIN_SRC emacs-lisp
(sf/package-install 'diminish)
#+END_SRC

*** Ediff

I am fairly used to *vimdiff*'s behavior.  I haven't had lots of
opportunities to familiarize myself with *ediff*, but the following
kinda-sorta helps.

#+BEGIN_SRC emacs-lisp
  (setq ediff-split-window-function 'split-window-horizontally)
  (setq ediff-window-setup-function 'ediff-setup-windows-plain)
#+END_SRC

*** Elfeed

[[https://github.com/skeeto/elfeed][Elfeed]] is a web feed (ATOM and RSS) reader for Emacs.  At this point,
I'm just playing with elfeed.  I don't know whether it will replace my
other news-reading utility.

#+BEGIN_SRC emacs-lisp
  (use-package elfeed
    :ensure elfeed
    :config
    (progn
      (setq elfeed-feeds
        '(("http://codeascraft.com/feed/" devops)
           ("http://endlessparentheses.com/atom.xml" emacs)
           ("http://planet.emacsen.org/atom.xml" emacs)
           ("http://oremacs.com/atom.xml" emacs)
           ("http://pragmaticemacs.com/feed/" emacs)
           ("http://mbork.pl/?action=rss" emacs )
           ("http://www.howardism.org/index.xml" emacs )
           ("http://kitchingroup.cheme.cmu.edu/blog/feed/atom/" emacs )
           ("http://sachachua.com/blog/feed" emacs )
           ("https://www.masteringemacs.org/feed" emacs )
           ("http://planetsysadmin.com/atom.xml" devops)
           ("https://feeds.feedburner.com/sysadvent" devops)
           ("http://fedoraplanet.org/atom.xml" linux fedora)
           ("http://planet.centos.org/atom.xml" linux centos)
           ("http://kernelplanet.org/rss20.xml" linux )
           ("http://planet.freedesktop.org/rss20.xml" linux )
           ("http://devopsreactions.tumblr.com/rss" devops fun)
           ("http://feeds.networklore.com/Networklore" netops )
           ("http://etherealmind.com/feed/" netops)
           ("http://www.humansofnewyork.com/rss" fun)
           ("http://xkcd.com/atom.xml" comics fun)
           ("https://what-if.xkcd.com/feed.atom" fun)
           ("http://americasgreatoutdoors.tumblr.com/rss" fun)
           )
        url-queue-timeout 30)
      (dolist (mode '(elfeed-show-mode elfeed-search-mode))
        (evil-set-initial-state mode 'emacs))
      ))
#+END_SRC

*** Emacsclient and server

This allows you to start a single Emacs process and then connect to it
via =emacsclient=.  In general, be sure to use =emacsclient -n= tells
=emacsclient= to not wait for the server to return.

#+BEGIN_SRC emacs-lisp
  (load "server")
  (unless (server-running-p) (server-start))
#+END_SRC

*** Hydra - Making Emacs bindings stick around

[[https://github.com/abo-abo/hydra][Hydra]] is a Emacs package that can be used to tie related commands into a
family of short bindings with a common prefix - aka the Hydra.

Abo Abo has some interesting posts on Hydra that demonstrate its
utility:

- [[http://oremacs.com/2015/02/03/one-hydra-two-hydra/][One Hydra Two Hydra Red Hydra Blue Hydra]]
- [[http://oremacs.com/2015/02/04/pre-hydra-post/][New in Hydra - :pre and :post clauses]]
- [[http://oremacs.com/2015/02/02/colorful-hydrae/][Colorful Hydras]]

Let's give it a shot.

#+BEGIN_SRC emacs-lisp
  (use-package hydra
    :ensure t)
#+END_SRC

*** Instant messaging: jabber & irc

**** Jabber

There is a jabber package for Emacs, along with a [[http://emacs-jabber.sourceforge.net/manual-0.8.0/index.html][manual]]. I'm still on
the fence as to whether I want to use this.  Regardless, here's the
necessary configuration.

#+BEGIN_SRC emacs-lisp
  (use-package jabber
    :ensure t
    :config
    (progn
      (setq 
        jabber-account-list sf/jabber-account-alist
        jabber-auto-reconnect t  ; reconnect automatically
        jabber-history-enabled t ; enable logging
        jabber-use-global-history nil
        jabber-backlog-number 40
        jabber-backlog-days 30
        jabber-history-dir "~/.local/share/logs/jabber"
        jabber-vcard-avatars-retrieve t ; automatically download vcard avatars
        jabber-alert-info-message-hooks (quote (jabber-info-libnotify jabber-info-echo jabber-info-display))
        jabber-alert-message-hooks (quote (jabber-message-notifications jabber-message-echo jabber-message-scroll))
        jabber-alert-presence-hooks (quote ()) ; don't show anything on presence changes
        jabber-alert-muc-hooks (quote (jabber-muc-notifications-personal jabber-muc-echo jabber-muc-scroll))
        )
      (dolist (mode '(jabber-chat-mode jabber-roster-mode))
        (evil-set-initial-state mode 'emacs))
      (add-hook 'jabber-post-connect-hooks 'jabber-autoaway-start)
      (defun sf/jabber-start-or-switch ()
        "Connect to Jabber services"
        (interactive)
        (when (get-buffer "*-jabber-roster-*")
          (jabber-connect-all))
        (if (or nil jabber-activity-jids)
          (jabber-activity-switch-to)
          (jabber-switch-to-roster-buffer)
          )
        )
      )
    )
#+END_SRC

**** IRC

Install [[http://www.bitlbee.org][bitlbee]] [[https://github.com/unhammer/bitlbee.el][mode]] to facilitate chatting on other networks via IRC.

#+BEGIN_SRC emacs-lisp
(sf/package-install 'bitlbee)
#+END_SRC

Go ahead and setup ERC.  This will also pull in TLS and _notifications_.
More information about ERC can be found at [[http://www.emacswiki.org/wiki/ERC][EmacsWiki]].  The authinfo file
has nick and password information.

#+BEGIN_SRC emacs-lisp
  (require 'notifications)
  (require 'tls)
  (use-package erc
    :config
    (progn

      (use-package erc-match
        :config
        (setq erc-track-exclude-types '("JOIN" "NICK" "PART" "QUIT" "MODE"
                                         "324" "329" "333" "353" "477")))

      (setq erc-modules '(autojoin autoaway button completion fill irccontrols
                           list log match menu move-to-prompt netsplit
                           networks notifications readonly ring
                           services smiley spelling stamp track))
      (erc-services-mode t)
      (setq
        erc-nick sf/erc-nick 
        erc-user-full-name sf/erc-nick
        erc-away-nickname sf/erc-away-nick
        erc-keywords sf/erc-keywords
        erc-auto-join-channels-alist sf/erc-channels-alist
        erc-insert-timestamp-function 'erc-insert-timestamp-left
        erc-timestamp-format "%H:%M:%S "
        ;; kill buffer after channel /part
        erc-kill-buffer-on-part t
        ;; kill buffer for server messages after /quit
        erc-kill-server-buffer-on-quit t
        ;; autoaway
        erc-auto-discard-away t
        erc-autoaway-use-emacs-idle t
        ;; logging
        erc-generate-log-file-name-function 'erc-generate-log-file-name-with-date
        erc-log-channels-directory "~/.local/share/logs/erc/"
        erc-log-insert-log-on-open nil
        erc-prompt-for-nickserv-password nil
        erc-save-buffer-on-part t)
      ))
#+END_SRC

The following function will either start ERC or switch to the bufer.
See http://emacs-fu.blogspot.com/2009/06/erc-emacs-irc-client.html. 

#+BEGIN_SRC emacs-lisp
  (defun sf/erc-connect ()
    "Connect to IRC via ERC"
    (interactive)
    (when (y-or-n-p "Connect to freenode? ")
      (erc-tls :server "irc.freenode.net" :port 6697))
    (when (y-or-n-p "Connect to bitlbee? ")
      (progn
        (use-package bitlbee)
        (bitlbee-start)
        (sleep-for 2)
        (erc :server "localhost" :port 6667)))
    )
#+END_SRC

Finally, add a join hook to authenticate to /bitlbee/.  This comes from
[[http://www.emacswiki.org/BitlBee][emacswiki]].

#+BEGIN_SRC emacs-lisp
  (defun bitlbee-netrc-identify ()
    "Auto-identify for Bitlbee channels using authinfo or netrc.

     The entries that we look for in netrc or authinfo files have
     their 'port' set to 'bitlbee', their 'login' or 'user' set to
     the current nickname and 'server' set to the current IRC
     server's name.  A sample value that works for authenticating
     as user 'keramida' on server 'localhost' is:

     machine localhost port bitlbee login keramida password supersecret"
    (interactive)
    (when (string= (buffer-name) "&bitlbee")
      (let* ((secret (plist-get (nth 0 (auth-source-search :max 1
                                         :host erc-server
                                         :user (erc-current-nick)
                                         :port "bitlbee"))
                       :secret))
              (password (if (functionp secret)
                          (funcall secret)
                          secret)))
        (erc-message "PRIVMSG" (concat (erc-default-target) " " "identify" " " password) nil))))
  ;; Enable the netrc authentication function for &biblbee channels.
  (add-hook 'erc-join-hook 'bitlbee-netrc-identify)
#+END_SRC

*** Ledger

[[http://www.ledger-cli.org/][Ledger]] is a double entry accounting system that can be used from the CLI
and from Emacs.  There is also a Haskell port, [[http://hledger.org/][hledger]], that is
compatible with ledger.  Hledger also has support for a web daemon that
may make data entry simpler.

- [[http://www.ledger-cli.org/3.0/doc/ledger3.html][Ledger 3 Documentation]]
- [[http://www.ledger-cli.org/3.0/doc/ledger-mode.html][Ledger Mode]]

#+BEGIN_SRC emacs-lisp
  (use-package ledger-mode
    :ensure t)
#+END_SRC

*** magit

I use [[http://magit.github.io/][magit]], the emacs mode for [[http://git-scm.com/][git]].  It can be used to review diffs,
commit, push changes, and other things.  Documentation is available in
_info_ and [[http://magit.github.io/master/magit.html][online]].  This also installs [[https://github.com/pidu/git-timemachine][git-timemachine]], a way of
navigating a file's history in [[http://git-scm.com/][git]].

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :init
    (progn
      (setq
        magit-push-always-verify nil
        magit-completing-read-function 'ivy-completing-read
        magit-last-seen-setup-instructions "1.4.0")
      (dolist (mode '(magit-mode magit-popup-mode magit-diff-mode))
        (evil-set-initial-state mode 'emacs))
      )
    :commands magit-status
    :bind ("C-x g" . magit-status))
  (sf/package-install 'git-timemachine)
#+END_SRC

*** Music 

[[https://github.com/pft/mingus][Mingus]] is a frontend for Emacs to the Music Player Daemon (MPD).  The
says it is meant to resemble /ncmpc/.

#+BEGIN_SRC emacs-lisp
(use-package mingus
  :ensure t)
#+END_SRC

*** Nyan
Because I find the [[http://www.nyan.cat/][Nyan Cat]] amusing …

#+BEGIN_SRC emacs-lisp
  (sf/package-install 'nyan-mode)
  (use-package zone-nyan
    :ensure t
    :init
    (progn (setq zone-programs [zone-nyan]) )
    )
#+END_SRC

*** Paradox
[[https://github.com/Malabarba/paradox][Paradox]] is a nice front-end to Emacs' package menu.  Among some of the
handy features:

| Shortcut | Action                           |
|----------+----------------------------------|
| v        | Visit package homepage           |
| l        | View list of recent commits      |
| f r      | Filter by regexp                 |
| f u      | Filter by packages with upgrades |
| f k      | Filter by keyword                |

#+BEGIN_SRC emacs-lisp
  (use-package paradox
    :ensure t
    :init
    (progn
      (setq paradox-execute-asynchronously t)
      (dolist (mode '(paradox-menu-mode paradox-commit-list-mode))
        (evil-set-initial-state mode 'emacs))
      )
    )
#+END_SRC

*** Powerline

One way to get a fancy modeline.  Disabled for now.

#+BEGIN_SRC emacs-lisp
  (use-package powerline
    :ensure t
    :init (powerline-default-theme))
#+END_SRC

*** Searching and Completion

**** Helm
    
[[https://github.com/emacs-helm/helm][Helm]] is an incremental completion and selectio narrowing framework for
Emacs.  It helps narrow your choices when searching for files, buffers,
commands, et cetera.

- [[http://tuhdo.github.io/helm-intro.html][Helm: A Package in a league of its own]]

| Keybinding | Command                           |
|------------+-----------------------------------|
| C-c ?      | Display help when in Helm session |
|            |                                   | 

The following rebinds *C-x c* to *C-c h* because the former is too close
to the command *C-x C-c*, *save-buffers-kill-terminal*.

#+BEGIN_SRC emacs-lisp
  (use-package helm
    :ensure helm
    :disabled t
    :diminish helm-mode
    :init
    (progn
      (require 'helm-config)
      (setq 
        helm-ff-skip-boring-files t
        helm-split-window-in-side-p t
        helm-ff-file-name-history-use-recentf t)
      (global-set-key (kbd "C-c h") 'helm-command-prefix)
      (global-unset-key (kbd "C-x c"))
      (helm-mode 1)
      (helm-autoresize-mode t))
    :config
      (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action)
    :bind (("M-x" . helm-M-x)
            ("C-x C-f" . helm-find-files)
            ("<f7>" . helm-recentf)
            ("C-x b" . helm-mini))
    )

#+END_SRC

**** IDO

A first crack at using [[http://www.emacswiki.org/InteractivelyDoThings][IDO]], aka /Interactively Do Things/.  Of
particular note, *ido-vertical-mode* is enabled again.

A few handy key-bindings when using IDO:

| Keybinding | Command                                       |
|------------+-----------------------------------------------|
| C-n        | move next through list                        |
| C-p        | move to previous in list                      |
| Tab        | display possible completion in buffer         |
| RET        | go down inside the directory in front of list |
| backspace  | go up to parent directory                     |
| //         | go to root directory                          |
| ~/         | go to home directory                          |
| C-f        | fall back to find file                        |
| C-d        | enter Dired for directory                     |
| C-j        | create new file named with text you entered   |
| C-b        | go back to buffer selection mode              |

[2015-02-09 Mon]: I disabled *ido* in favor of *helm*.

#+BEGIN_SRC emacs-lisp
  (use-package ido
    :disabled t
    :init
    (progn
      (use-package ido-vertical-mode
        :ensure t
        :disabled t
        :init (ido-vertical-mode 1))
      (use-package flx-ido
        :ensure flx-ido
        :disabled t
        :init (flx-ido-mode 1))
      (ido-mode 1)
      (ido-everywhere t)
      (setq
        ido-enable-flex-matching t
        ido-create-new-buffer 'always
        ido-use-faces nil
        ido-use-filename-at-point nil
        ido-auto-merge-work-directories-length 0))
    :bind (("<f7>" . recentf-open-files)
            ("C-x b" . ido-switch-buffer))
    )
#+END_SRC

Some possibly useful references:
- [[http://www.emacswiki.org/emacs/InteractivelyDoThings][EmacsWiki IDO]]
- [[http://www.masteringemacs.org/articles/2010/10/10/introduction-to-ido-mode/][Mastering Emacs: Introduction to IDO]]
- [[http://ergoemacs.org/emacs/emacs_buffer_switching.html][ErgoEmacs: Buffer switching]]

**** Smex

*Smex* is a ~M-x~ enhancement to recently and most frequently used
 commands.  It is typically used with *ido*.

#+BEGIN_SRC emacs-lisp
  (use-package smex
    :ensure smex
    :init (setq smex-completion-method 'ivy))
#+END_SRC

**** Ivy, Avy, and Swiper

[[https://github.com/abo-abo/swiper][swiper]] gives you an overview as you search for a regex.

#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :ensure swiper
    :diminish ivy-mode
    :init
    (progn
      (use-package counsel :ensure t)
      (define-key ivy-minibuffer-map (kbd "<tab>") 'ivy-alt-done)
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      )
    :bind (
            ("C-s" . swiper)
            ("C-c f" . counsel-git)
            )
    )
#+END_SRC

[[https://github.com/abo-abo/avy][avy]] is a package for jumping to visible text using a char-based decision
tree.

#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind ("M-g g" . avy-goto-line)
    )
#+END_SRC

**** Finding files

[[https://github.com/technomancy/find-file-in-project][find-file-in-project]] helps find files in a project ... quickly.

#+BEGIN_SRC emacs-lisp
  (use-package find-file-in-project
    :ensure t
    :bind ("C-c f" . find-file-in-project)
    )
#+END_SRC

*** Snippets

[[https://github.com/capitaomorte/yasnippet][Yasnippet]] is a template system for Emacs.  You type an abbreviation and
yasnippet will automatically expand it into the template.  The
[[https://capitaomorte.github.io/yasnippet/][documentation]] is online.

To go with yasnippet, you may want to consider installing
[[https://github.com/AndreaCrotti/yasnippet-snippets][yasnippet-snippets]], a collection of snippets for different modes.

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :diminish yasnippet-mode
    :init
    (progn
      (yas-global-mode 1)
      )
    )
#+END_SRC
*** Terminals

References on the subject of running terminals in Emacs:

- [[http://www.masteringemacs.org/article/running-shells-in-emacs-overview][Running Shells in Emacs]]

Set default shell to =bash=, make sure the initial state is =emacs= and
then provide helper function to launch =ansi-term=.

#+BEGIN_SRC emacs-lisp
  (setq explicit-shell-file-name "/bin/bash")
  (evil-set-initial-state 'term-mode 'emacs)
  (defun sf/terminal ()
    "Switch to terminal; launch if non-existent"
    (interactive)
    (if (get-buffer "*ansi-term*")
      (switch-to-buffer "*ansi-term*")
      (ansi-term "/bin/bash"))
    (get-buffer-process "*ansi-term*"))
#+END_SRC

At one time, I looked at =multi-term= as a way to have multiple
terminals.

#+BEGIN_SRC emacs-lisp
  (use-package multi-term
    :ensure t
    :disabled t
    :init
    (setq multi-term-program "/bin/bash")
    )
#+END_SRC

*** Tmux integration

[[https://github.com/syohex/emacs-emamux][Emamux]] allows you to interact with tmux from Emacs.  Should be
interesting to try, but have yet to hit on a use-case.

#+BEGIN_SRC emacs-lisp
  (use-package emamux
    :ensure emamux)
#+END_SRC

*** Twitter

[[https://github.com/hayamiz/twittering-mode][Twittering]] is a major mode that allows access to Twitter.  You can start
*twittering* with =M-x twit=.  

Keybindings of interest:

| Key              | Command                             |
|------------------+-------------------------------------|
| g                | Update current timeline             |
| V                | Open or switch timeline             |
| u                | Post tweet                          |
| RET              | Post reply to pointed tweet         |
| C-c RET          | Post organic retweet                |
| C-u C-c RET      | Post official retweet               |
| d                | Send direct message                 |
| C-c C-w          | Delete the pointed tweet            |
| 0                | Go to beginning of line             |
| ^                | Go to beginning of text on the line |
| $                | Go to end of the line               |
| G                | Go to bottom tweet                  |
| H                | Go to top tweet                     |
| h                | Move cursor left                    |
| j                | Go to next tweet                    |
| k                | Go to previous tweet                |
| l                | Move cursor right                   |
| n                | Go to next tweet by the author      |
| p                | Go to previous tweet by author      |
| TAB              | Go to next thing (link, user, URL)  |
| M-TAB            | Go to previous thing                |
| C-v / SPC        | Scroll buffer upward                |
| M-v / <backspace | Scroll buffer downward              |
|                  |                                     |

#+BEGIN_SRC emacs-lisp
  (use-package twittering-mode
    :ensure twittering-mode
    :config
    (progn
      (setq
        twittering-icon-mode 1
        twittering-use-master-password t
        twittering-private-info-file "~/.emacs.d/user/twittering-mode.gpg"
        )
      )
    )
#+END_SRC

*** Web development

[[http://web-mode.org/][web-mode]] is an Emacs mode for editing web pages and templates, in
particular [[http://jinja.pocoo.org/][Jinja]].

#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :ensure t
    :init
    (progn
      (setq 
        web-mode-css-indent-offset 2
        web-mode-markup-indent-offset 2
        web-mode-code-indent-offset 2
        )
      (add-to-list 'auto-mode-alist '("\\.html\\'" . web-mode))
      ))
#+END_SRC

*** Window Management

[[https://github.com/abo-abo/ace-window][ace-window]] is a mechanism to quickly switch between windows in an Emacs
frame.

#+BEGIN_SRC emacs-lisp
  (use-package ace-window :ensure ace-window)
#+END_SRC

[[http://www.emacswiki.org/emacs/TransposeFrame][Transpose Frame]] is a utility to quickly transpose the arrangement of
windows in the current frame.

#+BEGIN_SRC emacs-lisp
  (use-package transpose-frame :ensure transpose-frame)
#+END_SRC

** General configuration

And finally, we get to general configuration of Emacs.  ;-)

*** Basics

Use UTF-8 as the default locale.

#+BEGIN_SRC emacs-lisp
(prefer-coding-system 'utf-8)
#+END_SRC

Define format for line numbers on the side, when *linum-mode* is
enabled.

#+BEGIN_SRC emacs-lisp
(setq linum-format "%4d")
#+END_SRC

Turn on highlighting of current line.  See Emacs manual on [[http://www.gnu.org/software/emacs/manual/html_node/emacs/Cursor-Display.html][Cursor Display]].

#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode 1)
#+END_SRC

Skip the splash screen ...

#+BEGIN_SRC emacs-lisp
(setq inhibit-splash-screen t)
#+END_SRC

*** Backups

By default, Emacs will save backup files in the current directory.  This
will litter =~= files everywhere.  The following will store them in
=~/.emacs.d/backups=.  If need be, they can be found via =C-x C-f
(find-file)=.

This will keep a large number of backups.  =delete-old-versions= will
prevent trimming of backup versions.  =version-control= makes numeric
backup versions unconditionally.  Lastly, =auto-save-file-name-transforms=
will make filenames unique when saved in the backup directory.

#+BEGIN_SRC emacs-lisp
  (defvar sf/emacs-autosave-directory
    (concat user-emacs-directory "backups/")
    "This variable dictates where to put auto saves. It is set to a
      directory called backups located in your .emacs.d/ directory.")

  (setq
    backup-directory-alist `((".*" . ,sf/emacs-autosave-directory))
    auto-save-file-name-transforms `((".*" ,sf/emacs-autosave-directory t))
    delete-old-versions -1
    version-control t
    )
#+END_SRC

*** Saving and History

Save commands and their history.

#+BEGIN_SRC emacs-lisp
  (setq savehist-file "~/.emacs.d/savehist")
  (savehist-mode 1)
  (setq savehist-save-minibuffer-history 1)
  (setq savehist-additional-variables
    '(kill-ring search-ring regexp-search-ring))
#+END_SRC

The following will control [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Auto-Save-Control.html][auto-save]] behavior.

#+BEGIN_SRC emacs-lisp
  (setq auto-save-timeout 120)
  (setq auto-save-interval 1000)
#+END_SRC

With Emacs 24.4, the following will allow you to use the
_focus-out-hook_ for different things.  My preference here is to
instruct Emacs to save buffers.

#+BEGIN_SRC emacs-lisp
  (when (version<= "24.4" emacs-version)
    (add-hook 'focus-out-hook 'sf/save-all))
#+END_SRC

Some sort of alternative would be nice.  I tried
=mouse-leave-buffer-hook=, but that fires more often than I'd like.  It
is important to remember that buffer != X11 window.  The old idea of
running =sf/save-all= on a schedule is not that great either.

#+BEGIN_SRC emacs-lisp
;;  (add-hook 'mouse-leave-buffer-hook 'sf/save-all)
#+END_SRC

Lastly, enable *undo-tree-mode*.  You can visualize the changes with
=C-x u= (=undo-tree-visualize=).

#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :defer t
    :diminish undo-tree-mode
    :init
    (progn
      (global-undo-tree-mode)
      (setq
        undo-tree-visualizer-timestamps t
        undo-tree-visualizer-diff t)
      )
    )
#+END_SRC

*** Appearance

**** Themes

This installs and enables an Emacs theme.  I try out different themes on
a regular basis, but have been partial to [[http://ethanschoonover.com/solarized][Solarized]] for a long time.
More about Emacs themes can be read in the manual on [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Custom-Themes.html][custom-themes]].
This defines the default theme, which is then loaded below.

#+BEGIN_SRC emacs-lisp
  (dolist (p '(gruvbox-theme leuven-theme material-theme
               naquadah-theme solarized-theme
               color-theme-sanityinc-tomorrow
               spacegray-theme ample-theme
               professional-theme material-theme))
    (progn (sf/package-install p)))
   (defvar sf/gui-theme 'material "Preferred graphics theme") 
#+END_SRC

More information about themes can be found at EmacsWiki:

http://www.emacswiki.org/emacs/ColorTheme

This includes installing a theme for one buffer (=M-x
color-theme-buffer-local=) or for a specific frame.  You can also toggle
between day/night (light/dark) themes.

**** Fonts

This sets up the font and size when in graphical mode.  For awhile, I've
been comfortable with _Inconsolata_.  An alternative to this is _DejaVu
Sans Mono_.

This is taken from [[http://www.wisdomandwonder.com/wordpress/wp-content/uploads/2014/03/C3F.html#sec-11-3][C3F]] section on fonts.

This used to bind *C-=* to *sf/font-size-increase* and *C--* to
*sf/font-size-decrease*.  With /Emacs-24.4/, this didn't work anymore.
While it would be prudent to investigate why, I discovered that *C-x
C-=*, *C-x C--*, and *C-x C-0* are bound to *text-scale-adjust*.  This
will increase, decrease, and reset the font size.

#+BEGIN_SRC emacs-lisp
  (defconst sf/font-base "DejaVu Sans Mono" "Preferred font")
  (defvar sf/font-size 10 "Preferred font size")
  (defun sf/font-ok-p ()
    "Is configured font valid?"
    (interactive)
    (member sf/font-base (font-family-list)))
  (defun sf/font-name ()
    "Compute font name and size string"
    (interactive)
    (let* ((size (number-to-string sf/font-size))
            (name (concat sf/font-base "-" size)))
      name))
  (defun sf/font-size-increase ()
    "Increase font size"
    (interactive)
    (setq sf/font-size (+ sf/font-size 1))
    (sf/font-update))
  (defun sf/font-size-decrease ()
    "Decrease font size"
    (interactive)
    (setq sf/font-size (- sf/font-size 1))
    (sf/font-update))
  (defun sf/set-emoji-font ()
    "Set emoji font properly"
    (interactive)
    (set-fontset-font t 'symbol (font-spec :family "Symbola") nil 'prepend)
    )
  (defun sf/font-update ()
    "Update font configuration"
    (interactive)
    (if (sf/font-ok-p)
      (progn
        (message "Setting font to: %s" (sf/font-name))
        (set-default-font (sf/font-name))
        )
      )
    )
  (sf/font-update)
#+END_SRC

**** General appearance items

If using Emacs in server mode, the following function wraps things to do
when creating a frame.

#+BEGIN_SRC emacs-lisp
  (defun sf/look-feel ()
    "Set up look and feel"
    (interactive)
    (when (display-graphic-p)
      (sf/font-update)
      (sf/set-emoji-font)
      (tool-bar-mode -1)
      (scroll-bar-mode -1)
      (load-theme sf/gui-theme t))
    )
#+END_SRC

A few things when in graphical mode:
- Disable the toolbar and scroll bar.
- Install [[https://julien.danjou.info/projects/emacs-packages][rainbow mode]] to /colorize color names in buffers/.
- Run ~sf/look-feel~.

#+BEGIN_SRC emacs-lisp
  (sf/package-install 'rainbow-mode)
  (when (display-graphic-p)
    (sf/look-feel))
#+END_SRC

Activate syntax highlighting.  See [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Font-Lock.html][Font Lock]] in the Emacs manual.

#+BEGIN_SRC emacs-lisp
  (require 'font-lock)
  (global-font-lock-mode 1)
  (setq font-lock-use-default-colors t)
#+END_SRC

Add some information to the mode line: line, column, battery remaining,
and the time.

#+BEGIN_SRC emacs-lisp
  (setq line-number-mode t)
  (setq column-number-mode t)
  (setq display-battery-mode t)
  (setq display-time-24hr-format t)
  (display-battery-mode)
#+END_SRC

**** DONE Use ~after-make-frame-functions~ if using emacsclient
     CLOSED: [2015-04-06 Mon 20:10]

If I start Emacs via ~emacs --server~, I still want the frame to have
the right look when I invoke =emacsclient=.  Something like:

#+BEGIN_SRC emacs-lisp
  (if (daemonp)
    (add-hook 'after-make-frame-functions
      (lambda (frame)
        (select-frame frame)
        (sf/look-feel))
      )
    )
#+END_SRC

*** Behavior

**** Buffers

Use =uniquify= to make two (or more) buffers open with the same file
name distinguishable.  The configuration below tries to best match the
full path name.  Try to ignore special buffers.

#+BEGIN_SRC emacs-lisp
(require 'uniquify)
(setq 
  uniquify-buffer-name-style 'forward
  uniquify-separator "/"
  uniquify-ignore-buffers-re "^\\*"
  uniquify-after-kill-buffer-p t)
#+END_SRC

- [2015-03-04 Wed] Drop [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Iswitchb.html][iswitchb]] as it is deprecated.

**** Windows

I used to use _switch-window_ to navigate between windows.  Nowadays, I
use either =helm= or the =hydra= below.

#+BEGIN_SRC emacs-lisp
  (sf/package-install 'switch-window)
  ;; (use-package switch-window
  ;;   :bind ("C-x o" . switch-window)
  ;;   :init
  ;;   (progn (setq switch-window-shortcut-style 'alphabet)))
#+END_SRC

This is my preferred mechanism to navigate between windows.  It uses
=hydra=, =ace-window=, and =windmove= (among others).  This is taken
from [[http://oremacs.com/2015/02/04/pre-hydra-post/][oremacs.com]].

#+BEGIN_SRC emacs-lisp
  (global-set-key
    (kbd "C-M-o")
    (defhydra hydra-window ()
      "window"
      ("h" windmove-left)
      ("j" windmove-down)
      ("k" windmove-up)
      ("l" windmove-right)
      ("v" (lambda ()
             (interactive)
             (split-window-right)
             (windmove-right)) "vert")
      ("x" (lambda ()
             (interactive)
             (split-window-below)
             (windmove-down)) "horz")
      ("t" transpose-frame "'")
      ("o" delete-other-windows "one" :color blue)
      ("a" ace-window "ace" :color blue)
      ("s" ace-swap-window "swap")
      ("d" ace-delete-window "del")
      ("i" ace-maximize-window "ace-one" :color blue)
      ("b" ido-switch-buffer "buf")
      ("m" headlong-bookmark-jump "bmk")
      ("q" nil "cancel")))
#+END_SRC

I'm not using =ace-jump= at this time.

#+BEGIN_SRC emacs-lisp
;  (sf/package-install 'ace-jump-mode)
#+END_SRC

**** Mouse

The following tries to smooth out mouse scrolling so that it isn't so
jumpy.  There are a couple references:

- http://www.emacswiki.org/emacs/SmoothScrolling
- http://stackoverflow.com/questions/3631220/fix-to-get-smooth-scrolling-in-emacs

#+BEGIN_SRC emacs-lisp
(setq 
  scroll-step 1               ;; keyboard scroll one line at a time
  scroll-conservatively 10000
  scroll-preserve-screen-position 1
  mouse-wheel-follow-mouse 't ;; scroll window under mouse
  mouse-wheel-progressive-speed nil     ;;  don't accelerate scrolling
  mouse-wheel-scroll-amount '(1 ((shift) . 5)
                                    ((control)))
)
#+END_SRC

+Autoselect the window with the mouse pointer.  This is effectively
/focus-follows-mouse/, but for windows in an Emacs frame.+

#+BEGIN_SRC emacs-lisp
(setq mouse-autoselect-window nil)
#+END_SRC

**** General 

In general, use spaces instead of tabs.

#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil)
#+END_SRC

This defines where values are set if you use Customize.  My preference
is to configure things here or in _init.el_.

#+BEGIN_SRC emacs-lisp
(setq custom-file (concat user-emacs-directory "custom.el"))
(when (file-exists-p custom-file)
  (load custom-file))
#+END_SRC
**** DONE Making opening files easier
     CLOSED: [2014-05-06 Tue 09:17]

Emacs provides a mode called [[https://www.gnu.org/software/emacs/manual/html_node/emacs/File-Conveniences.html][recentf-mode]] that will track files you
open.  When you call =recentf-open-files=, it will present a numbered
list and you can then select the file to open.  [[http://ergoemacs.org/][ErgoEmacs]] also discusses
how to configure [[http://ergoemacs.org/emacs/emacs_recentf.html][recentf-mode]].

The following enables =recentf-mode= and binds *F7* to =ivy-recentf=.
It also limits the maximum number of items in the =recentf= menu.

#+BEGIN_SRC emacs-lisp
  (use-package recentf
    :init
    (progn
      (setq
        recentf-max-menu-items 50
        recentf-exclude '("COMMIT_MSG" "COMMIT_EDITMSG")
        )
      )
    :bind ("<f7>" . ivy-recentf)
    )
#+END_SRC

**** Helpers

Define a hydra to start/switch to applications or trigger miscellaneous actions.

#+BEGIN_SRC emacs-lisp
  (global-set-key
    (kbd "<f9>")
    (defhydra hydra-app-selector (:color blue
                                   :columns 5)
      "Action"
      ("e" notmuch "email")
      ("f" elfeed "elfeed")
      ("t" twit "twitter")
      ("j" sf/jabber-start-or-switch "jabber")
      ("m" mingus "music")
      ("s" sf/terminal "shell")
      ("p" paradox-list-packages "packages")
      )
    )
#+END_SRC

A function to insert an [[http://www.theatlantic.com/technology/archive/2014/05/the-best-way-to-type-__/371351/][existential shrug]].

#+BEGIN_SRC emacs-lisp
(defun sf/shrug ()
  "Shrug emoji"
  (interactive)
  (insert "¯\\_(ツ)_/¯"))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun sf/glare () "Glare emoji" (interactive) (insert "ಠ_ಠ"))
#+END_SRC

** Programming and Editing

*** Basics

Show matching parenthesis.

#+BEGIN_SRC emacs-lisp
(show-paren-mode t)
#+END_SRC

I want a final newline to be added to a file when it is about to be
saved.

#+BEGIN_SRC emacs-lisp
  (setq-default require-final-newline t)
#+END_SRC

*** Lisp

A default offset of 2 seems to make sense for lisp.

#+BEGIN_SRC emacs-lisp
(setq lisp-indent-offset 2)
#+END_SRC

*** Lua

#+BEGIN_SRC emacs-lisp
  (use-package lua-mode
    :ensure t)
#+END_SRC

*** Markdown

Help Emacs grok when to trigger /markdown-mode/ when editing certain
files.

#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :ensure t
    :init
    (progn
      (add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))
      (add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
      ))
#+END_SRC

*** Python

Turn on *linum-mode* when editing Python files.

#+BEGIN_SRC emacs-lisp
(add-hook 'python-mode-hook 'linum-mode)
(add-hook 'python-mode-hook 'sf/whitespace)
#+END_SRC

*** Shell scripts

Also turn on *linum-mode* for shell scripts.

#+BEGIN_SRC emacs-lisp
(add-hook 'shell-script-mode 'linum-mode)
(add-hook 'shell-script-mode 'sf/whitespace)
#+END_SRC

*** Text

Use auto-fill and set a column width to 72.

#+BEGIN_SRC emacs-lisp
(add-hook 'text-mode-hook 'turn-on-auto-fill)
(add-hook 'text-mode-hook
  '(lambda() (set-fill-column 72)))
#+END_SRC

*** YAML

A helper mode when editing [[http://yaml.org/][YAML]] files.

#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :ensure t
    :config
    (progn
      (setq yaml-indent-offset 2)
      (add-hook 'yaml-mode-hook 'linum-mode)
      (add-hook 'yaml-mode-hook 'sf/whitespace)
      )
    )
#+END_SRC

*** JSON

A helper mode when editing [[www.json.org][JSON]].

#+BEGIN_SRC emacs-lisp
  (use-package json-mode
    :ensure t
    :config
    (progn
      (add-hook 'json-mode-hook 'linum-mode)
      (add-hook 'json-mode-hook 'sf/whitespace)
      )
    )
#+END_SRC

** Mail configuration

*** General

I tend to try several different mail clients over time.  This includes
typical GUI clients and Emacs-based clients.  Sometimes the client
behavior is enough at odds at what I want and I don't want to bother
forcing it the way I work.  The following sets up some basics for when
using Emacs for mail.  First and foremost, Use the =message-user-agent=
for composing email.

#+BEGIN_SRC emacs-lisp
  (setq
    mail-user-agent 'message-user-agent
    mail-from-style 'angles
  )
#+END_SRC

*** Sending email

Send email via SMTP instead of using a local sendmail binary.

#+BEGIN_SRC emacs-lisp
(setq message-send-mail-function 'smtpmail-send-it)
#+END_SRC

Set up =message-mode=.  This will kill the buffer after sending an email
and set preferences for message citation and how to forward an
email. For more on configuring Emacs =message-mode=, see the [[https://www.gnu.org/software/emacs/manual/html_mono/message.html][manual]].

#+BEGIN_SRC emacs-lisp
  (setq message-kill-buffer-on-exit t
    message-citation-line-format "On %a, %Y-%m-%d at %T %z, %N wrote:"
    message-citation-line-function (quote message-insert-formatted-citation-line)
    message-make-forward-subject-function (quote message-forward-subject-fwd)
    message-signature t
    message-signature-file "~/.signature"
    )
#+END_SRC

Enable certain modes for *message-mode*:

#+BEGIN_SRC emacs-lisp
  (add-hook 'message-mode-hook 'footnote-mode)
  (add-hook 'message-mode-hook 'turn-on-flyspell)
#+END_SRC

The following configures default SMTP settings for =smtpmail=.

#+BEGIN_SRC emacs-lisp
  (setq
    smtpmail-stream-type 'ssl
    smtpmail-default-smtp-server sf/smtp-server
    smtpmail-smtp-server sf/smtp-server
    smtpmail-smtp-service 465
    smtpmail-smtp-user sf/smtp-user
    )
#+END_SRC

Be sure to use an encrypted /authinfo/ file.

#+BEGIN_SRC emacs-lisp
(setq smtpmail-auth-credentials "~/.authinfo.gpg")
#+END_SRC

Use /dired/ to attach files to /notmuch/ messages.  

#+BEGIN_SRC emacs-lisp
(require 'gnus-dired)
#+END_SRC

*** Mutt

If I'm using /mutt/, I want the related buffers to behave as if they are
email-related. 

#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("/tmp/mutt.*" . message-mode))
  (add-hook 'message-mode-hook
    'turn-on-auto-fill
    (lambda()
      (auto-fill-mode t)
      (setq fill-column 72)
      (setq mail-header-separator "")
      )
    )
#+END_SRC

*** Multiple identities

One day, perhaps, I will want to use multiple accounts (ie. identities)
when sending email via Emacs.  Much of this was taken from [[http://notmuchmail.org/emacstips/#index17h2][notmuch
emacstips]].  You can find =gnus-alias.el= on [[http://www.emacswiki.org/emacs/gnus-alias.el][emacswiki]].

=gnus-alias-identity= takes a lot of arguments.  They are briefly
described below.

1. Account nickname
2. Other identity it may refer to
3. Sender address
4. Organization header
5. Extra headers
6. Extra body text
7. Signature file

#+BEGIN_EXAMPLE
(setq gnus-alias-identity alist
  '(("gmail" nil "Joe Smith <jsmith@example.net>" nil nil nil nil))
  )
#+END_EXAMPLE

#+BEGIN_SRC emacs-lisp
(setq gnus-alias-identity-alist sf/gnus-alias-alist)
#+END_SRC

*** offlineimap

This is a mode to run [[http://offlineimap.org/][offlineimap]] from.

#+BEGIN_SRC emacs-lisp
  (use-package offlineimap
    :ensure t
    :init
    (progn
      (dolist (mode '(offlineimap-mode))
        (evil-set-initial-state mode 'emacs))
      )
    )
#+END_SRC

*** mu4e

[[http://www.djcbsoftware.nl/code/mu/mu4e.html][mu4e]] is an emacs-based email client that uses [[http://www.djcbsoftware.nl/code/mu/][mu]] as its backend.

The following function facilitates sending email from multiple accounts.

#+BEGIN_SRC emacs-lisp
  (defun my-mu4e-set-account ()
    "Set the account for composing a message."
    (let* ((account
             (if mu4e-compose-parent-message
               (let ((maildir (mu4e-message-field mu4e-compose-parent-message :maildir)))
                 (string-match "/\\(.*?\\)/" maildir)
                 (match-string 1 maildir))
               (completing-read (format "Compose with account: (%s) "
                                  (mapconcat #'(lambda (var) (car var))
                                    sf/mu4e-account-alist  "/"))
                 (mapcar #'(lambda (var) (car var)) sf/mu4e-account-alist )
                 nil t nil nil (caar sf/mu4e-account-alist ))))
            (account-vars (cdr (assoc account sf/mu4e-account-alist ))))
      (if account-vars
        (mapc #'(lambda (var)
                  (set (car var) (cadr var)))
          account-vars)
        (error "No email account found")
        )
      )
    )
  (defun mu4e-action-show-thread (msg)
    "Show all messages that are in the same thread as the message
  at point."
    (let ((msgid (mu4e-message-field msg :message-id)))
      (when msgid
        (let ((mu4e-headers-show-threads t)
               (mu4e-headers-include-related t))
          (mu4e-headers-search
            (format "msgid:%s" msgid)
            )
          )
        )
      )
    )
#+END_SRC

What follows is the bulk of the configuration for mu4e.

#+BEGIN_SRC emacs-lisp
  (use-package mu4e
    :disabled t
    :config
    (progn
      (require 'mu4e-contrib)
      (setq
        mu4e-attachment-dir "~/Download"
        mu4e-html2text-command 'mu4e-shr2text
        mu4e-use-fancy-chars t
        mu4e-bookmarks '(
                          ("flag:unread AND NOT flag:trashed" "Unread messages" ?u)
                          ("date:today..now" "Today's messages" ?t)
                          ("date:7d..now" "Last 7 days" ?w)
                          ("flag:flagged" "Flagged" ?f)
                          ("flag:attach" "Messages with attachments" ?a)
                          ("mime:text/calendar" "Meeting invites" ?c)
                          ("mime:image/*" "Messages with images" ?p)
                          )
        mu4e-headers-actions '(
                               ("capture message" . mu4e-action-capture-message)
                               ("show thread"     . mu4e-action-show-thread)
                               )
        mu4e-view-actions '(
                             ("capture message" . mu4e-action-capture-message)
                             ("tag message"     . mu4e-action-retag-message)
                             ("view as pdf"     . mu4e-action-view-as-pdf)
                             ("show thread"     . mu4e-action-show-thread)
                             )
        mu4e-maildir (expand-file-name "~/.mail")
        mu4e-compose-signature-auto-include t
        mu4e-get-mail-command "offlineimap"
        mu4e-update-interval 300              ;; check for updates every 5 min
        mu4e-view-scroll-to-next nil          ;; do not advance to next message when scolling
        mu4e-view-show-images t               ;; show images inline
        mu4e-view-show-addresses t            ;; always show full email address
        mu4e-sent-folder   "/Work/Sent"       ;; folder for sent messages
        mu4e-drafts-folder "/Work/Drafts"     ;; unfinished messages
        mu4e-trash-folder  "/Work/Trash"      ;; trashed messages
        mu4e-refile-folder "/Work/Archive"    ;; saved messages
        )
      (add-hook 'mu4e-compose-pre-hook 'my-mu4e-set-account)
      (dolist (mode '(mu4e-main-mode mu4e-compose-mode mu4e-headers-mode mu4e-view-mode))
        (evil-set-initial-state mode 'emacs))
      (defun sf/mu4e-forward-as-attachment ()
        "Forward message as an attachment"
        (interactive)
        (let ((subject (plist-get (mu4e-message-at-point t) :subject))
               (path (plist-get (mu4e-message-at-point t) :path)))
          (mu4e-compose 'new)
          (unless (file-exists-p path)
            (mu4e-warn "Message file not found"))
          (mml-attach-file
            path
            "message/rfc822"
            (or subject "No subject")
            "attachment")
          (when (message-goto-subject)
            (message-delete-line))
          (message-add-header (concat "Subject: " mu4e~draft-forward-prefix subject))
          )
        )
      (defun sf/mu4e-bounce-message (address)
        "Bounce message at point to a recipient.
See https://github.com/djcb/mu/pull/449/files"
        (interactive "sBounce to: ")
        (let ((path (plist-get (mu4e-message-at-point t) :path)))
          (unless (and path (file-readable-p path))
            (mu4e-error "Not a readable file: %S" path))
          (find-file path)
          (mu4e-compose-mode)
          (make-local-variable 'mu4e-sent-messages-behavior)
          (setq mu4e-sent-messages-behavior 'sent)
          (message-resend address)
          (kill-buffer)
          )
        )
      (define-key mu4e-headers-mode-map (kbd "f") 'sf/mu4e-forward-as-attachment)
      (define-key mu4e-headers-mode-map (kbd "y") 'mu4e-headers-mark-for-refile)
      (define-key mu4e-headers-mode-map (kbd "B") 'sf/mu4e-bounce-message)
      (define-key mu4e-view-mode-map (kbd "f") 'sf/mu4e-forward-as-attachment)
      (define-key mu4e-view-mode-map (kbd "y") 'mu4e-view-mark-for-refile)
      )
    )
#+END_SRC

*** notmuch

[[http://notmuchmail.org/][notmuch]] is basically a mail indexer.  It helps you to better tame your
inbox with search, tagging, and other functions.  There is a CLI
interface to interact with your email in Maildir format.  Or, you can
use the Emacs notmuch client front-end. 

If you want to follow development more closely than one's distribution,
the following will checkout and build source on RedHat derived
distributions.

#+BEGIN_EXAMPLE
$ git clone git://notmuchmail.org/git/notmuch
$ sudo yum install offlineimap xapian-core-devel \
  gmime-devel libtalloc-devel gcc gcc-c++
$ ./configure --prefix /usr/local && make && sudo make install
#+END_EXAMPLE

Define various keybindings.

#+BEGIN_SRC emacs-lisp
  (use-package notmuch
    :ensure notmuch
    :init
    (progn
      (setq
        gnus-inhibit-images t
        notmuch-archive-tags '("-inbox" "-unread" "-trash" "+archive")
        notmuch-crypto-process-mime t
        notmuch-fcc-dirs sf/notmuch-fcc-dirs
        notmuch-hello-thousands-separator ","
        notmuch-search-oldest-first nil
        notmuch-show-part-button-default-action 'notmuch-show-view-part
        notmuch-saved-searches 
        '(
           (:name "inbox"      :key "i" :query "tag:inbox")
           (:name "flagged"    :key "f" :query "tag:flagged")
           (:name "today"      :key "t" :query "date:today..now and not tag:archive and not tag:sent")
           (:name "7 days"     :key "7" :query "date:7d..now and not tag:archive and not tag:sent")
           (:name "announce"   :key "a" :query "tag:announce and not tag:archive")
           (:name "reports"    :key "r" :query "tag:reports")
           (:name "lists"      :key "l" :query "tag:lists and not tag:archive")
           (:name "noc"        :key "n" :query "tag:noc and not tag:archive")
           (:name "attachment" :key "A" :query "tag:attachment")
           )
        )
;;      (when (not (string= system-name sf/work-workstation))
;;        (setq notmuch-command "~/bin/notmuch-remote.sh"))
      (add-to-list 'auto-mode-alist '("notmuch-raw-id" . markdown-mode))
      (add-hook 'notmuch-hello-mode-hook 'sf/nolinum)
      (add-hook 'notmuch-show-hook '(lambda () (setq show-trailing-whitespace nil)))
      (dolist (mode '(notmuch-search notmuch-show notmuch-help notmuch-message-mode))
        (evil-set-initial-state mode 'emacs))
      )
    :config
    (progn
      (define-key notmuch-show-mode-map (kbd "d")
        (lambda ()
          "mark message for trash"
          (interactive)
          (notmuch-show-add-tag '("+trash" "-inbox" "-unread"))
          (unless (notmuch-show-next-open-message)
            (notmuch-show-next-thread t))))
      (define-key notmuch-search-mode-map (kbd "d")
        (lambda ()
          "mark message for trash"
          (interactive)
          (notmuch-search-tag (list "+trash" "-inbox" "-unread"))
          (notmuch-search-next-thread )))
      (define-key notmuch-show-mode-map (kbd "J")
        (lambda ()
          "mark message as junk"
          (interactive)
          (notmuch-show-add-tag (list "+spam" "-inbox" "-unread"))
          (unless (notmuch-show-next-open-message)
            (notmuch-show-next-thread t))))
      (define-key notmuch-show-mode-map (kbd "F")
        (lambda ()
          "star message"
          (interactive)
          (notmuch-show-add-tag (list "+flagged"))))
      (define-key notmuch-show-mode-map (kbd "b")
        (lambda (&optional address)
          "Bounce the current message"
          (interactive "sBounce to: ")
          (notmuch-show-view-raw-message)
          (message-resend address)))
      (define-key notmuch-search-mode-map (kbd "F")
        (lambda ()
          "star thread"
          (interactive)
          (notmuch-search-tag (list "+flagged"))))
      (define-key notmuch-show-mode-map   (kbd "TAB") 'notmuch-show-toggle-message)
      (define-key notmuch-search-mode-map (kbd "g") 'notmuch-refresh-this-buffer)
      (define-key notmuch-hello-mode-map  (kbd "g") 'notmuch-refresh-this-buffer)
      )
    )
#+END_SRC

Last, but not least, enable linking to messages from org-mode.

#+BEGIN_SRC emacs-lisp
  (use-package org-notmuch)
#+END_SRC

*** gnus

[[http://www.gnus.org/manual/gnus_toc.html][Gnus]] is a built-in message reader for Emacs.  It supports reading and
composing both mail and news.  The [[http://www.gnus.org/manual/gnus_toc.html][manual]] is available online.  There
are lots and lots of posts online about configuring *Gnus*.  Much of
this is influenced by:

- [[http://www.cataclysmicmutation.com/2010/11/multiple-gmail-accounts-in-gnus/][Multiple GMail Accounts in Gnus]]
- [[http://blog.binchen.org/posts/notes-on-using-gnus.html][Practical guide to use Gnus with Gmail]]
- [[http://qsdfgh.com/articles/2014/08/11/gnus-configuration-example.html][QSDFGH Gnus configuration example]]
- [[https://github.com/kensanata/ggg][Gnus, Gmail, GPG]]

A note regarding terminology:  Gnus uses the term /archiving/ to
describe the method for storing mail you send. 

This enables searching of IMAP based accounts.
#+BEGIN_SRC emacs-lisp
(require 'nnir)
#+END_SRC

Accounts and other sources of reading material.  The first sets the
default method for fetching articles.  This also sets /secondary/
methods, which happens to be IMAP.

Since I'm breaking this up into lots of parts, the paren matching will
be a bit weird.

Set default =gnus-select-method= to ~nil~.

#+NAME: gnus-select-method
#+BEGIN_SRC emacs-lisp :tangle no
  (setq gnus-select-method '(nnnil ""))
#+END_SRC

Go ahead and define /marks/ for the GUI.

#+NAME: gnus-marks
#+BEGIN_SRC emacs-lisp :tangle no
  (setq
    gnus-score-over-mark   ?↑
    gnus-score-below-mark  ?↓
    gnus-ticked-mark       ?⚑
    gnus-dormant-mark      ?⚐
    gnus-expirable-mark    ?♻
    gnus-read-mark         ?✓
    gnus-del-mark          ?✗
    gnus-killed-mark       ?☠
    gnus-replied-mark      ?⟲
    gnus-forwarded-mark    ?⤳
    gnus-cached-mark       ?☍
    gnus-recent-mark       ?★
    gnus-unseen-mark       ?✩
    gnus-unread-mark       ?✉)
#+END_SRC

Set more marks related to threading.

#+NAME: gnus-thread-tree
#+BEGIN_SRC emacs-lisp :tangle no
  (setq
    gnus-sum-thread-tree-indent          " "
    gnus-sum-thread-tree-single-indent   "◎ "
    gnus-sum-thread-tree-root            "● "
    gnus-sum-thread-tree-false-root      "☆"
    gnus-sum-thread-tree-vertical        "│"
    gnus-sum-thread-tree-leaf-with-other "├─► "
    gnus-sum-thread-tree-single-leaf     "╰─► " )
#+END_SRC

Set the /archive/ group to ~Sent~.  For more information, see [[https://www.gnu.org/software/emacs/manual/html_node/gnus/Archived-Messages.html][Archived
messages]].  Also automatically mark sent messages as /read/.

#+NAME: gnus-archive
#+BEGIN_SRC emacs-lisp :tangle no
  (setq
    gnus-gcc-mark-as-read t
    gnus-message-archive-method "nnimap"
    gnus-message-archive-group "Sent")
#+END_SRC

Define date format for successively older articles, the [[http://www.gnus.org/manual/big-gnus.html#Summary-Buffer-Lines][summary line]]
format, and how to sort threads.  While not done here, one can also
configure the [[http://www.gnus.org/manual/big-gnus.html#Group-Line-Specification][group line]] format.

#+NAME: gnus-format
#+BEGIN_SRC emacs-lisp :tangle no
  (setq
    gnus-user-date-format-alist '(
                                   ((gnus-seconds-today) . "Today %H:%M")
                                   ((+ 86400 (gnus-seconds-today)) . "Yest. %H:%M")
                                   (604800 . "%a %H:%M") ;;that's one week
                                   ((gnus-seconds-month) . "%a %d")
                                   ((gnus-seconds-year) . "%B %d")
                                   (t . "%B %d '%y") )
    gnus-summary-line-format "%U%R%z% %(%11,11&user-date;  %-15,15f  %B%s%)\n"
    gnus-thread-sort-functions '(gnus-thread-sort-by-most-recent-date)
    )
#+END_SRC

Pull in icalendar support.

#+NAME: gnus-icalendar
#+BEGIN_SRC emacs-lisp :tangle no
;(require 'gnus-icalendar)
;(gnus-icalendar-setup)
#+END_SRC

Redefine some keybindings here to what makes sense for me.

#+NAME: gnus-define-keys
#+BEGIN_SRC emacs-lisp :tangle no
  (defun sf/email-trash ()
    "Trash the current or marked emails"
    (interactive)
    (gnus-summary-move-article nil "nnimap+work:Trash"))
  (defun sf/email-archive ()
    "Archive the current or marked emails"
    (interactive)
    (gnus-summary-move-article nil "nnimap+work:Archive"))
  (define-key gnus-summary-mode-map (kbd "d") 'sf/email-trash)
  (define-key gnus-summary-mode-map (kbd "a") 'sf/email-archive)
  (define-key gnus-summary-mode-map (kbd "r") 'gnus-summary-reply-with-original)
  (define-key gnus-summary-mode-map (kbd "R") 'gnus-summary-wide-reply-with-original)
  (define-key gnus-summary-mode-map (kbd "f") 'gnus-summary-mail-forward)
  (define-key gnus-article-mode-map (kbd "r") 'gnus-summary-reply-with-original)
  (define-key gnus-article-mode-map (kbd "R") 'gnus-summary-wide-reply-with-original)
  (define-key gnus-article-mode-map (kbd "f") 'gnus-summary-mail-forward)
#+END_SRC

Other odds and ends.

#+NAME: gnus-odds-ends
#+BEGIN_SRC emacs-lisp :tangle no
  (setq
    gnus-agent t
    gnus-fetch-old-headers 'some 
    gnus-single-article-buffer nil
    gnus-use-full-window nil
    gnus-message-replysign t
    gnus-message-replyencrypt t
    gnus-summary-display-arrow t
    gnus-summary-thread-gathering-function 'gnus-gather-threads-by-references
    gnus-activate-level 2
    mm-inline-text-html-with-images t
    mm-text-html-renderer 'shr
    shr-color-visible-luminance-min 60
    )
  (require 'gnus-gravatar)
#+END_SRC

Here, I configure the /secondary/ accounts.  In fact, these are the main
accounts in use.

#+NAME: gnus-secondary-select
#+BEGIN_SRC emacs-lisp :tangle no
    ;; use backtick to evaluate ,-prefixed expressions
  (setq gnus-secondary-select-methods
    `((nnimap "work"
        (nnimap-address ,sf/nnimap-work-address)
        (nnimap-server-port 993)
        (nnimap-stream ssl)
        (nnir-search-engine imap)
        (nnimap-list-pattern ("INBOX"))
        (nnimap-inbox ("INBOX"))
        )
       (nnimap "personal"
         (nnimap-address ,sf/nnimap-personal-address)
         (nnimap-server-port 993)
         (nnimap-stream ssl)
         (nnir-search-engine imap)
         (nnimap-list-pattern ("INBOX"))
         (nnimap-inbox ("INBOX"))
         )
       )
    )
#+END_SRC

The following section has a lot going on.  It uses [[http://www.gnu.org/software/emacs/manual/html_node/gnus/Group-Parameters.html][group parameters]] for
[[http://www.gnu.org/software/emacs/manual/html_node/gnus/Posting-Styles.html#Posting-Styles][posting styles]] and [[https://www.gnu.org/software/emacs/manual/html_node/gnus/Expiring-Mail.html#Expiring-Mail][expiring mail]].

#+NAME: gnus-group-parameters
#+BEGIN_SRC emacs-lisp :tangle no
  (defun sf/personal-expiry-target (group)
    "Expire email in personal account"
    (setq nnmail-fancy-expiry-targets sf/personal-expiry-targets)
    (nnmail-fancy-expiry-target group)
    )
  (defun sf/work-expiry-target (group)
    "Expire email in work account"
    (setq nnmail-fancy-expiry-targets sf/work-expiry-targets)
    (nnmail-fancy-expiry-target group)
    )
  (setq gnus-parameters '(
                           ("work"
                             (display . all)
                             (expiry-wait . never)
                             (gcc-self . "nnimap+work:Sent")
                             (posting-style
                               (gcc "nnimap+work:Sent")
                               `(address ,sf/email-work)
                               (signature-file "~/.signature")
                               ))
                           ("work:INBOX"
                              (display . all)
                              (expiry-target . sf/work-expiry-target)
                              (expiry-wait . 7)
                              )
                           ("work:Archive"
                              (display . all)
                              (expiry-target . never)
                              )
                           ("personal.*"
                             (gcc-self . "nnimap+personal:[Gmail]Sent Mail")
                             (posting-style
                               (gcc "nnimap+personal:[Gmail]/Sent Mail")
                               `(address ,sf/email-personal)
                               `(signature ,user-full-name)
                               )
                             )
                           ("personal:INBOX"
                              (display . all)
                              (expiry-target . sf/personal-expiry-target)
                              (expiry-wait . 7)
                              )
                           )
    )
#+End_SRC

Add a hook for [[http://www.gnus.org/manual/big-gnus.html#Group-Topics][topics]] when in group mode.  And a hook for updating
scores.

#+NAME: gnus-hooks 
#+BEGIN_SRC emacs-lisp :tangle no
  (add-hook 'gnus-group-mode-hook 'gnus-topic-mode)
  (add-hook 'gnus-summary-exit-hook 'gnus-summary-bubble-group)
#+END_SRC

Let's finally configure ~gnus~ when the command is run.  Pull in [[http://www.gnu.org/software/emacs/manual/html_node/gnus/nnir.html][nnir]] to enable
search on *Gnus* backends.  Then, enable the [[https://www.gnu.org/software/emacs/manual/html_node/gnus/The-Gnus-Registry.html][Gnus Registry]] and finally
pull in all the above pieces.

#+BEGIN_SRC emacs-lisp :noweb yes
  (use-package gnus
    :commands gnus
    :init
    (progn
      (require 'nnir)
      (gnus-registry-initialize)
      <<gnus-icalendar>>
      <<gnus-select-method>>
      <<gnus-marks>>
      <<gnus-thread-tree>>
      <<gnus-archive>>
      <<gnus-format>>
      <<gnus-odds-ends>>
      <<gnus-secondary-select>>
      <<gnus-group-parameters>>
      <<gnus-hooks>>
      <<gnus-define-keys>>
      )
    )
#+END_SRC

Lastly, the following will configure adaptive scoring.  This is
presently disabled, but preserved in case I want to go this route.

#+BEGIN_SRC emacs-lisp :tangle no
  (setq
    gnus-use-adaptive-scoring '(word line)
    gnus-adaptive-word-length-limit 5
    gnus-adaptive-word-no-group-words t
    gnus-default-adaptive-score-alist '((gnus-unread-mark)
                                         (gnus-ticked-mark (from 4))
                                         (gnus-dormant-mark (from 5))
                                         (gnus-del-mark (from -4) (subject -1))
                                         (gnus-read-mark (from 4) (subject 2))
                                         (gnus-expirable-mark (from -1) (subject -1))
                                         (gnus-killed-mark (from -1) (subject -3))
                                         (gnus-kill-file-mark)
                                         (gnus-ancient-mark)
                                         (gnus-low-score-mark)
                                         (gnus-catchup-mark (from -1) (subject -1)))
    )
#+END_SRC

**** Group buffer

Gnus starts in the [[http://www.gnus.org/manual/gnus_15.html#SEC15][group buffer]].  This lists subscribed groups.  For an
email account, this would be email folders.  Type *L* to see all groups,
including those with no unread articles.  Type *l* to see only
subscribed groups with unread articles.  Type *g* to refresh the
subscribed groups.

**** Server buffer

The Gnus [[http://www.gnus.org/manual/gnus_159.html#SEC159][server buffer]] can be entered via *^*
(*gnus-group-enter-server-mode*).  Gnus uses backends (eg nnimap) to
connect to real servers.  The server buffer is a way to view the
backends in use.

**** Summary buffer

The Gnus [[http://www.gnus.org/manual/gnus_59.html#SEC59][summary buffer]] will show the messages for a given group.  Think
of it as emails in a folder.  Type *SPACE* to view the currently
selected article.  Type *=* (*gnus-summary-expand-window*) to close the
article view and only display the summary.

**** Splitting

[[https://www.gnu.org/software/emacs/manual/html_node/gnus/Splitting-Mail.html][Splitting mail]] is taking incoming mail and filtering it out to different
groups (aka folders).  There's also [[https://www.gnu.org/software/emacs/manual/html_node/gnus/Fancy-Mail-Splitting.html#Fancy-Mail-Splitting][fancy mail splitting]].

To assist with debugging splitting, you can use the command =M-x
nnmail-split-history=.  This will show you where the previous mail split
put messages.  There's also the command =gnus-summary-respool-trace=
command to see what re-spooling of messages would do.  There are other
[[https://www.gnu.org/software/emacs/manual/html_node/gnus/Mail-Group-Commands.html][mail group]] commands that may be of interest.

** Le Fin

The end.  Send a message so that the user knows it has been completely
loaded.

#+BEGIN_SRC emacs-lisp
(message "%s" "Finished loading config")
#+END_SRC


