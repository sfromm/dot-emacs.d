#+TITLE: Action Browser
#+PROPERTY: header-args :tangle ~/.emacs.d/site-lisp/action-browser.el

* Action Browser

The idea is a relatively simple one.  I would like a global shortcut
that pops open an Emacs frame with a handful of quick tasks to choose
from and that can also easily be dismissed.

One example is something like this:

- https://punchagan.muse-amuse.in/blog/emacs-frame-as-a-pop-up-input/

For lack of a better name, I call it the /action browser/.  ¯\_(ツ)_/¯

For starters, define the basic variables needed.

#+BEGIN_SRC emacs-lisp
  (require 'widget)

  (defvar sf/action-buffer-name "*action-browser*" "Name of the action buffer")

  (defvar sf/action-mode-hook nil "Hook for the action mode")

  (defvar sf/action-mode-map
    (let ((map (make-sparse-keymap)))
      (set-keymap-parent map widget-keymap)
      (define-key map "c" 'sf/action-org-capture)    
      (define-key map "p" 'sf/action-passmgr)
      (define-key map "q" 'sf/action-bury-buffer)
      (define-key map (kbd "<S-Tab>") 'widget-backward)
      map)
    "Keymap for \"Action\" buffers.")
  (fset 'sf/action-mode-map sf/action-mode-map)
#+END_SRC

Define the mode and some of the functions that will do the work.

#+BEGIN_SRC emacs-lisp
  (defun sf/action-passmgr ()
    "Invoke the password manager"
    (interactive)
    (pass)
    (delete-other-windows))

  (defun sf/action-org-capture ()
    "Invoke org-mode capture"
    (interactive)
    (org-capture)
    (delete-other-windows))

  (defun sf/action-bury-buffer ()
    "Kill buffer and frame"
    (interactive)
    (kill-buffer)
    (delete-frame))

  (define-derived-mode sf/action-mode nil "Action Browser"
    "Action selector mode

   \\{sf/action-mode-map}"
    (interactive)
    (kill-all-local-variables)
    (buffer-disable-undo)
    (use-local-map sf/action-mode-map)
    (setq mode-name "Action Browser")
    (run-mode-hooks 'sf/action-mode-hook))
#+END_SRC

Define a function that will insert the widgets for each piece of
functionality.  This should be closely tied to the =mode-map= for
keyboard functionality.

#+BEGIN_SRC emacs-lisp
  (defun sf/action-insert-widgets ()
    "Create and insert widgets for actions"
    (goto-char (point-max))
    (widget-insert "Action Selection:\n\n")
    (widget-create 'push-button
      :tag (propertize "Capture" 'face 'font-lock-keyword-face)
      :help-echo "Manage Password Store"
      :action (lambda (&rest ignore) (sf/action-org-capture))
      :follow-link "\C-m"
      :mouse-face 'highlight)    
    (widget-insert " ")
    (widget-create 'push-button
      :tag (propertize "Passwords" 'face 'font-lock-keyword-face)
      :help-echo "Manage Password Store"
      :action (lambda (&rest ignore) (sf/action-passmgr))
      :follow-link "\C-m"
      :mouse-face 'highlight)
    (widget-insert " ")
    (widget-create 'push-button
      :tag (propertize "Cancel" 'face 'font-lock-keyword-face)
      :notify (lambda (&rest ignore) (sf/action-bury-buffer)))
    (widget-insert "\n\n"))
#+END_SRC

Finally, create the functions that will invoke the mode and create a new
frame for the mode.

#+BEGIN_SRC emacs-lisp
  (defun sf/action-hello (&optional refresh)
    "Create a special buffer for actions"
    (interactive)
    (get-buffer-create sf/action-buffer-name)
    (switch-to-buffer sf/action-buffer-name)
    (let ((target-line (line-number-at-pos))
           (target-column (current-column))
           (inhibit-read-only t))

      (erase-buffer)
      (unless (eq major-mode 'sf/action-mode)
        (sf/action-mode))

      (sf/action-insert-widgets)
      (widget-setup)
      (use-local-map sf/action-mode-map)

      (goto-char (point-min))
      (forward-line (1- target-line))
      (move-to-column target-column)))

  (defun sf/action-hello-frame (&optional refresh)
    ""
    (interactive)
    (make-frame '((name . "hello-action")
                   (width . 80)
                   (height . 24)
                   (minibuffer . nil)))
    (select-frame-by-name "hello-action")
    (sf/action-hello))

  (provide 'action-browser)
#+END_SRC

* Global shortcut

** MacOSX

Here are the rough steps to automate on MacOSX:

- Create a new /Service/ Automator document
- Change input type to /no input/.
- Scroll to /Run Shell Script/ under Library -> Utilities.  Drag that
  into work area.  Paste the script below into the action.
- Save the script with a name of your choosing.
- Open /Keyboard/ in /System Preferences/
- Choose /Shortcuts/ and then choose /Services/
- Find the service you created in the list.
- Enable the service and add a keybinding.

#+BEGIN_EXAMPLE
/usr/local/bin/emacsclient -n -e "(sf/action-hello-frame)"
#+END_EXAMPLE
