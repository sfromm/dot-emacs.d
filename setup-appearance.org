#+TITLE: Appearance Configuration
#+PROPERTY: header-args :tangle ~/.emacs.d/site-lisp/setup-appearance.el

* Fonts

This sets up the font and size when in graphical mode.  While currently
configured for [[https://github.com/tonsky/FiraCode][Fira Code]], there are lots of other fonts I like such as
[[https://github.com/adobe-fonts/source-code-pro][Source Code Pro]], [[https://dejavu-fonts.github.io/][DejaVu Sans Mono]], [[http://levien.com/type/myfonts/inconsolata.html][Inconsolata]], [[https://github.com/be5invis/Iosevka][Iosevka]], and others.

To install fonts on MacOSX:

#+BEGIN_SRC sh :tangle no :results silent
brew tap caskroom/fonts
brew cask install font-fira-code
brew cask install font-source-code-pro
#+END_SRC

This allows one to call to *sf/font-size-increase* and
*sf/font-size-decrease* to change font and font size.  You can also use
*C-x C-=*, *C-x C--*, and *C-x C-0* are bound to *text-scale-adjust*.
This will increase, decrease, and reset the font size for the frame in
question. 

The following defines some variables and functions to help us out.

#+BEGIN_SRC emacs-lisp
  (defvar sf/font-name nil "Preferred font")
  (defvar sf/font-size 0 "Preferred font size")

  (defun sf/font-ok-p ()
    "Is configured font valid?"
    (interactive)
    (member sf/font-name (font-family-list)))
  (defun sf/font-name-and-size ()
    "Compute font name and size string"
    (interactive)
    (let* ((size (number-to-string sf/font-size))
            (name (concat sf/font-name "-" size)))
      name))
  (defun sf/font-size-increase ()
    "Increase font size"
    (interactive)
    (setq sf/font-size (+ sf/font-size 1))
    (sf/font-update))
  (defun sf/font-size-decrease ()
    "Decrease font size"
    (interactive)
    (setq sf/font-size (- sf/font-size 1))
    (sf/font-update))
  (defun sf/set-emoji-font ()
    "Set emoji font properly"
    (interactive)
    (set-fontset-font t 'symbol (font-spec :family "Symbola") nil 'prepend))
  (defun sf/font-update ()
    "Update font configuration"
    (interactive)
    (if (sf/font-ok-p)
      (progn
        (message "Setting font to: %s" (sf/font-name-and-size))
        (set-frame-font sf/font-name)
        (set-face-attribute 'default nil :font sf/font-name :height (* sf/font-size 10))
        (set-face-font 'default sf/font-name)
        (sf/set-emoji-font))))
#+END_SRC

Now, let's put the above to work.

#+BEGIN_SRC emacs-lisp
  (progn
    (setq
      sf/font-name "Fira Code Light"
      sf/font-size 12)
    (sf/font-update))
#+END_SRC

[[https://github.com/domtronn/all-the-icons.el][all-the-icons]] makes emacs pretty.  Let's do this.

#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons :ensure t)

  (use-package all-the-icons-dired
    :ensure t
    :init
    (add-hook 'dired-mode-hook 'all-the-icons-dired-mode))
#+END_SRC
* Themes

This installs and enables an Emacs theme.  I try out different themes on
a regular basis, but have been partial to [[http://ethanschoonover.com/solarized][Solarized]] for a long time.
More about Emacs themes can be read in the manual on [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Custom-Themes.html][custom-themes]].
This defines the default theme, which is then loaded below.

#+BEGIN_SRC emacs-lisp
  (dolist (p '(leuven-theme
                material-theme
                solarized-theme
                spacemacs-theme
                zenburn-theme
                professional-theme))
    (progn (sf/package-install p)))
  (defvar sf/gui-theme nil "Preferred graphics theme")
  (setq sf/gui-theme 'material)
#+END_SRC

More information about themes can be found at EmacsWiki:

http://www.emacswiki.org/emacs/ColorTheme

This includes installing a theme for one buffer (=M-x
color-theme-buffer-local=) or for a specific frame.  You can also toggle
between day/night (light/dark) themes.

* Mode Line

Add some information to the mode line: line, column, battery remaining,
and the time.

#+BEGIN_SRC emacs-lisp
  (setq line-number-mode t
    column-number-mode t
    display-battery-mode t
    display-time-24hr-format t
  (display-battery-mode)
#+END_SRC

Pull in [[https://github.com/Malabarba/smart-mode-line/][smart-mode-line]] to help make things pretty.

#+BEGIN_SRC emacs-lisp
  (use-package smart-mode-line
    :ensure t
    :config
    (add-hook 'after-load-theme-hook 'smart-mode-line-enable)
    (setq
      sml/no-confirm-load-theme t
      sml/theme 'dark
      sml/mode-width 'full
      sml/name-width 30
      sml/shorten-modes t)
    (sml/setup))
#+END_SRC

* Nyan Cat

Because I find the [[http://www.nyan.cat/][Nyan Cat]] amusing â€¦ install nyan packages.

#+BEGIN_SRC 
(sf/package-install 'nyan-mode)
(sf/package-install 'zone-nyan)
#+END_SRC

* General Look and Feel

If using Emacs in server mode, the following function wraps things to do
when creating a frame.

#+BEGIN_SRC emacs-lisp
  (defun sf/look-feel ()
    "Set up look and feel"
    (interactive)
    (when (display-graphic-p)
      (sf/font-update)
      (tool-bar-mode -1)
      (scroll-bar-mode -1)
      (load-theme sf/gui-theme t))
    )
#+END_SRC

If I start Emacs via ~emacs --server~, I still want the frame to have
the right look when I invoke =emacsclient=.  Something like:

#+BEGIN_SRC emacs-lisp
  (when (display-graphic-p)
    (sf/look-feel))

  (if (daemonp)
    (add-hook 'after-make-frame-functions
      (lambda (frame)
        (select-frame frame)
        (sf/look-feel))
      )
    )
#+END_SRC

A few things when in graphical mode:

- Disable the toolbar and scroll bar.
- Install [[https://julien.danjou.info/projects/emacs-packages][rainbow mode]] to /colorize color names in buffers/.

#+BEGIN_SRC emacs-lisp
  (sf/package-install 'rainbow-mode)
#+END_SRC

Activate syntax highlighting.  See [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Font-Lock.html][Font Lock]] in the Emacs manual.

#+BEGIN_SRC emacs-lisp
  (require 'font-lock)
  (global-font-lock-mode 1)
  (setq font-lock-use-default-colors t)
#+END_SRC

* Postamble

Finally, offer module for use.

#+BEGIN_SRC emacs-lisp
(provide 'setup-appearance)
#+END_SRC

* License

This document is licensed under the GNU Free Documentation License
version 1.3 or later (http://www.gnu.org/copyleft/fdl.html).

#+BEGIN_SRC 
Copyright (C) 2018 Stephen Fromm

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3
or any later version published by the Free Software Foundation;
with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.

Code in this document is free software: you can redistribute it
and/or modify it under the terms of the GNU General Public
License as published by the Free Software Foundation, either
version 3 of the License, or (at your option) any later version.

This code is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
#+END_SRC
