#+TITLE: Chat and Instant Messaging
#+PROPERTY: header-args :tangle ~/.emacs.d/site-lisp/setup-chat.el

* Jabber

There is a [[https://www.emacswiki.org/emacs/JabberEl][jabber package]] for Emacs, along with a [[http://emacs-jabber.sourceforge.net/manual-0.8.0/index.html][manual]].  You can use
it to connect to Google Talk along with your standard Jabber servers.

#+BEGIN_SRC emacs-lisp
  (use-package jabber
    :ensure t
    :config
    (progn
      (setq 
        jabber-account-list sf-custom/jabber-account-alist
        jabber-auto-reconnect t  ; reconnect automatically
        jabber-history-dir (concat user-emacs-directory "user/log/jabber")
        jabber-history-enabled t ; enable logging
        jabber-history-muc-enabled t
        jabber-use-global-history nil
        jabber-backlog-number 40
        jabber-backlog-days 30
        jabber-chat-buffer-show-avatar t ; show avatar in chat buffer
        jabber-vcard-avatars-retrieve t ; automatically download vcard avatars
        jabber-alert-info-message-hooks (quote (jabber-info-libnotify jabber-info-echo jabber-info-display))
        jabber-alert-message-hooks (quote (jabber-message-notifications jabber-message-echo jabber-message-scroll))
        jabber-alert-presence-hooks (quote ()) ; don't show anything on presence changes
        jabber-alert-muc-hooks (quote (jabber-muc-notifications-personal jabber-muc-echo jabber-muc-scroll))
        )
      ; jabber uses the fsm package
      (setq fsm-debug nil)       ; defaults to "*fsm-debug*"
      (dolist (mode '(jabber-chat-mode jabber-roster-mode))
        (evil-set-initial-state mode 'emacs))
      (dolist (hook '(jabber-chat-mode-hook jabber-roster-mode-hook))
        (add-hook hook (lambda () "Disable yasnippet in jabber" (setq yas-dont-activate t))))
      (add-hook 'jabber-post-connect-hooks 'jabber-autoaway-start)
      (defun sf/jabber-start-or-switch ()
        "Connect to Jabber services"
        (interactive)
        (unless (get-buffer "*-jabber-roster-*")
          (jabber-connect-all))
        (if (or nil jabber-activity-jids)
          (jabber-activity-switch-to)
          (jabber-switch-to-roster-buffer)
          )
        )
      )
    )
#+END_SRC

* IRC

This will set up [[https://www.gnu.org/software/emacs/manual/html_mono/erc.html][ERC]], the built-in IRC client for Emacs.  This will also
pull in TLS and _notifications_.  More information about ERC can be
found at [[http://www.emacswiki.org/wiki/ERC][EmacsWiki]].  The authinfo file has nick and password
information.

#+BEGIN_SRC emacs-lisp
  (require 'notifications)
  (require 'tls)
  (use-package erc
    :config
    (progn

      (use-package erc-match
        :config
        (setq erc-track-exclude-types '("JOIN" "NICK" "PART" "QUIT" "MODE"
                                         "324" "329" "333" "353" "477")))

      (setq erc-modules '(autojoin autoaway button completion fill irccontrols
                           list log match menu move-to-prompt netsplit
                           networks notifications readonly ring
                           services smiley spelling stamp track))
      (erc-services-mode t)
      (setq
        erc-nick sf-custom/erc-nick
        erc-user-full-name sf-custom/erc-nick
        erc-away-nickname sf-custom/erc-away-nick
        erc-keywords sf-custom/erc-keywords
        erc-auto-join-channels-alist sf-custom/erc-channels-alist
        erc-insert-timestamp-function 'erc-insert-timestamp-left
        erc-timestamp-format "%H:%M:%S "
        ;; kill buffer after channel /part
        erc-kill-buffer-on-part t
        ;; kill buffer for server messages after /quit
        erc-kill-server-buffer-on-quit t
        ;; autoaway
        erc-auto-discard-away t
        erc-autoaway-use-emacs-idle t
        ;; logging
        erc-generate-log-file-name-function 'erc-generate-log-file-name-with-date
        erc-log-channels-directory (concat user-emacs-directory "user/log/erc")
        erc-log-insert-log-on-open nil
        erc-prompt-for-nickserv-password nil
        erc-save-buffer-on-part t)
      ))
#+END_SRC

The following function will either start ERC or switch to the bufer.  [fn:1]

#+BEGIN_SRC emacs-lisp
  (defun sf/erc-connect ()
    "Connect to IRC via ERC"
    (interactive)
    (when (y-or-n-p "Connect to freenode? ")
      (erc-tls :server "irc.freenode.net" :port 6697))
    (when (y-or-n-p "Connect to bitlbee? ")
      (progn
        (use-package bitlbee)
        (bitlbee-start)
        (sleep-for 2)
        (erc :server "localhost" :port 6667)))
    )
#+END_SRC

I've gone back and forth on whether to use [[http://www.bitlbee.org][bitlbee]] over the years.
There is an Emacs [[https://github.com/unhammer/bitlbee.el][mode]] to work with bitlbee, allowing chatting via IRC
on non-IRC networks.

#+BEGIN_SRC emacs-lisp
(sf/package-install 'bitlbee)
#+END_SRC

This function then adds a join hook to authenticate to /bitlbee/.  [fn:2]

#+BEGIN_SRC emacs-lisp
  (defun bitlbee-netrc-identify ()
    "Auto-identify for Bitlbee channels using authinfo or netrc.

     The entries that we look for in netrc or authinfo files have
     their 'port' set to 'bitlbee', their 'login' or 'user' set to
     the current nickname and 'server' set to the current IRC
     server's name.  A sample value that works for authenticating
     as user 'keramida' on server 'localhost' is:

     machine localhost port bitlbee login keramida password supersecret"
    (interactive)
    (when (string= (buffer-name) "&bitlbee")
      (let* ((secret (plist-get (nth 0 (auth-source-search :max 1
                                         :host erc-server
                                         :user (erc-current-nick)
                                         :port "bitlbee"))
                       :secret))
              (password (if (functionp secret)
                          (funcall secret)
                          secret)))
        (erc-message "PRIVMSG" (concat (erc-default-target) " " "identify" " " password) nil))))
  ;; Enable the netrc authentication function for &biblbee channels.
  (add-hook 'erc-join-hook 'bitlbee-netrc-identify)
#+END_SRC

* Postamble

Finally, offer module for use.

#+BEGIN_SRC emacs-lisp
(provide 'setup-chat)
#+END_SRC

* Footnotes

[fn:1] http://emacs-fu.blogspot.com/2009/06/erc-emacs-irc-client.html

[fn:2] https://www.emacswiki.org/emacs/BitlBee

