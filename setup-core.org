#+TITLE: Core Emacs Setup
#+PROPERTY: header-args :tangle ~/.emacs.d/site-lisp/setup-core.el

* ELPA and Package Sources

Use =M-x package-refresh-contents= to reload the list of packages
after adding these for the first time.

MELPA is probably the more popular package repository.  It also has lots
of packages compared to other repositories.  Be aware that MELPA uses
snapshots instead of 'stable' releases.

- [2014-05-16 Fri] [[http://emacsredux.com/blog/2014/05/16/melpa-stable/][Turns out]] that there is also a [[http://melpa-stable.milkbox.net/#/][MELPA stable]].  While I
  do not have it configured here, it is useful to know about.

#+BEGIN_SRC emacs-lisp
  (setq package-archives '(("org" . "https://orgmode.org/elpa/")
                            ("melpa" . "http://melpa.org/packages/")
                            ("gnu" . "http://elpa.gnu.org/packages/")))
;                            ("marmalade" . "http://marmalade-repo.org/packages/")))
  (package-initialize)
  (require 'package)
#+END_SRC

ELPA provides a nice resource to install packages.  The following
function facilitates installing packages from ELPA.  It will refresh the
package database before trying to install a package.

Further down, I also use the feature from =use-package= where it can
install a package.

#+BEGIN_SRC emacs-lisp
(defun sf/package-install (package)
  "Install PACKAGE it not yet installed."
  (unless (package-installed-p package)
    (message "%s" "Refreshing package database...")
    (package-refresh-contents)
    (message "%s" " done.")
    (package-install package)
    (delete-other-windows)))
#+END_SRC

* Define custom

This defines where values are set if you use [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Easy-Customization.html][customize]].  My preference
is to configure Emacs in the /org/ files and then tangle them.  However,
there are some packages that set values via /customize/.  This
configures the =custom-file=.  If =custom-file= is /nil/, Emacs will use
the init file as specified by =user-init-file=, which is typically
/init.el/.

#+BEGIN_SRC emacs-lisp
(setq custom-file (concat user-emacs-directory "user/custom.el"))
(when (file-exists-p custom-file)
  (load custom-file))
#+END_SRC

* Set up use-package

[[https://github.com/jwiegley/use-package][use-package]] is a declaration macro that allows you to isolate package
configuration in your Emacs configuration.  This [[http://ericjmritz.name/2013/11/25/simplify-emacs-configuration-with-use-package/][page]] provides an
example of how to use =use-package=.  Don't forget the [[https://github.com/jwiegley/use-package/blob/master/README.md][documentation]] for
*use-package*.

#+BEGIN_SRC emacs-lisp
(sf/package-install 'use-package)
(require 'use-package)
#+END_SRC

* Helper functions

The following functions should help where some configuration is platform-specific.

#+BEGIN_SRC emacs-lisp
  (defun sf/system-type-is-darwin ()
    "Return true if system is Darwin/MacOS"
    (string-equal system-type "darwin")
    )

  (defun sf/system-type-is-windows ()
    "Return true if system is Windows"
    (string-equal system-type "windows-nt")
    )

  (defun sf/system-type-is-linux ()
    "Return true if system is GNU/Linux"
    (string-equal system-type "gnu/linux")
    )
#+END_SRC

Pull in some packages that will be useful later.

#+BEGIN_SRC emacs-lisp
  (require 'cl)
#+END_SRC

Define a function that will switch to the last used buffer.

#+BEGIN_SRC emacs-lisp
  (defun sf/switch-to-last-buffer ()
    (interactive)
    (switch-to-buffer (other-buffer (current-buffer) 1)))
#+END_SRC

Save all buffers and then run =depot-sync.sh=.

#+BEGIN_SRC emacs-lisp
  (defun sf/save-all ()
    (interactive)
    (progn
      (message "Saving buffers at %s" (format-time-string "%Y-%m-%dT%T"))
      (save-some-buffers t)
      (with-temp-buffer (async-shell-command "depot-sync.sh" t))))
#+END_SRC

Define function that will disable =global-linum=.

#+BEGIN_SRC emacs-lisp
  (defun sf/nolinum ()
    "Disable global-linum-mode"
    (global-linum-mode 0))
#+END_SRC

Function to create a full ISO 8601 format timestamp.

#+BEGIN_SRC emacs-lisp
  (defun sf/timestamp ()
    "Insert full ISO 8601 format timestamp"
    (interactive)
    (insert (format-time-string "%Y-%m-%dT%T%z")))
#+END_SRC

Toggle whitespace cues.

#+BEGIN_SRC emacs-lisp
  (defun sf/whitespace ()
    "Enable whitespace visualizations"
    (setq highlight-tabs t)
    (setq show-trailing-whitespace t))
#+END_SRC

While it is pretty straightforward to update packages via
~list-packages~ (via ~U x~), the following function makes it perhaps a
little easier.

#+BEGIN_SRC emacs-lisp
  (defun sf/update-packages ()
    "update all installed packages"
    (interactive)
    (save-window-excursion
      (package-refresh-contents)
      (package-list-packages t)
      (package-menu-mark-upgrades)
      (package-menu-execute t)
      (message "packages updated")
      ))
#+END_SRC

Via http://ergoemacs.org/emacs/elisp_read_file_content.html:

#+BEGIN_SRC emacs-lisp
  (defun get-string-from-file (path)
    "Return file content of path"
    (with-temp-buffer
      (insert-file-contents path)
      (buffer-string)))
#+END_SRC

The following function sets the =GPG_AGENT_INFO= environment variable.

#+BEGIN_SRC emacs-lisp
  (defun sf/set-gpg-env ()
    "Set GPG_AGENT_INFO environmental variable"
    (interactive)
    (setenv "GPG_TTY" (terminal-name))
    (setenv "GPG_AGENT_INFO"
      (concat (if (file-exists-p (concat "/run/user/" (number-to-string (user-real-uid)) "/gnupg/S.gpg-agent"))
                (concat "/run/user/" (number-to-string (user-real-uid)) "/gnupg/S.gpg-agent")
                (expand-file-name "~/.gnupg/S.gpg-agent"))
        ":"
        (replace-regexp-in-string "\n$" ""
          (shell-command-to-string (concat "pgrep -u " (number-to-string (user-real-uid)) " gpg-agent")))
        ":1")))
#+END_SRC

This is a helper function to call all functions that set an environment
variable.

#+BEGIN_SRC emacs-lisp
  (defun sf/set-env-vars ()
    "Helper function to set environmental variables"
    (interactive)
    (sf/set-gpg-env))
#+END_SRC

This helps with aligning code (or other text) by whitespace, taken from
[[http://pragmaticemacs.com/emacs/aligning-text/][Ben Maughn]].

#+BEGIN_SRC emacs-lisp
  (defun sf/align-whitespace (start end)
    "Align columns by whitespace"
    (interactive "r")
    (align-regexp start end "\\(\\s-*\\)\\s-" 1 0 t))
#+END_SRC

And another one from [[http://pragmaticemacs.com/emacs/join-line-to-following-line/][Ben Maughn]], join current line to the following
line.

#+BEGIN_SRC emacs-lisp
  (defun sf/join-next-line ()
    "Join the next line with the current line."
    (interactive)
    (join-line -1))
  (global-set-key (kbd "M-j") 'sf/join-next-line)
#+END_SRC

A series of functions from [[https://github.com/magnars/.emacs.d/blob/master/defuns/buffer-defuns.el][Magnars' buffer-defuns.el]].

#+BEGIN_SRC emacs-lisp
  (defun untabify-buffer ()
    "Remove tabs from buffer"
    (interactive)
    (untabify (point-min) (point-max)))

  (defun indent-buffer ()
    "Indent buffer"
    (interactive)
    (indent-region (point-min) (point-max)))

  (defun cleanup-buffer ()
    "Clean up whitespace in a buffer"
    (interactive)
    (untabify-buffer)
    (delete-trailing-whitespace)
    (indent-buffer))
#+END_SRC

Twiddle the luminance for emails.

#+BEGIN_SRC emacs-lisp
  (defun sf/twiddle-luminance (value)
    "Twiddle the luminance value"
    (interactive "nLuminance: ")
    (setq shr-color-visible-luminance-min value))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (require 'dbus)
  (defun sf/network-online? ()
    "Check if we have a working network connection"
    (interactive)
    (let ((nm-service "org.freedesktop.NetworkManager")
           (nm-path "/org/freedesktop/NetworkManager")
           (nm-interface "org.freedesktop.NetworkManager")
           (nm-state-connected-global 70))
      (eq (dbus-get-property :system
            nm-service nm-path nm-interface "State")
        nm-state-connected-global)))
#+END_SRC

The following is inspired by Sacha Chua's [[http://sachachua.com/blog/2015/12/scan-bin-turn-scripts-emacs-commands/][post]] on converting shell
commands into Emacs functions.  I'm not sure I want every shell command
to be an Emacs command at this time, but I'll enable it for one.

#+BEGIN_SRC emacs-lisp
  (defun sf/shell/ip-qry ()
    "Invoke ip-qry for information"
    (interactive)
    (let ((ipqry (concat (getenv "HOME") "/bin/ip-qry.py"))
           (buffer-name "*ip-qry*")
           (ipaddr))
      (if (not (region-active-p))
        (setq ipaddr (read-string "IP address: "))
        (setq ipaddr (buffer-substring (region-beginning) (region-end))))
      (call-process ipqry nil buffer-name t ipaddr)
      (display-buffer buffer-name 'display-buffer-pop-up-window)))
#+END_SRC

This is a helper to export an org-mode table to CSV file.  See:
https://emacs.stackexchange.com/questions/16640/can-i-export-a-specific-table-in-an-org-file-to-csv-from-the-command-line

#+BEGIN_SRC emacs-lisp
  (defun sf/org-tbl-export (name)
    "Search for table named `NAME` and export"
    (interactive "s")
    (show-all)
    (push-mark)
    (goto-char (point-min))
    (let ((case-fold-search t))
      (if (search-forward-regexp (concat "#\\+NAME: +" name) nil t)
        (progn
          (next-line)
          (org-table-export (format "%s.csv" name) "orgtbl-to-csv"))))
    (pop-mark))
#+END_SRC

Copy the path to the current file to the clipboard.

#+BEGIN_SRC emacs-lisp
  (defun sf/copy-file-name-to-clipboard ()
    "Copy current buffer file name to the clipboard."
    (interactive)
    (let ((filename (if (equal major-mode 'dired-mode)
                      default-directory
                      (buffer-file-name))))
      (when filename
        (kill-new filename)
        (message "Copied buffer file name '%s' to clipboard." filename))))
#+END_SRC

Transparency for Emacs frames.  See: https://www.emacswiki.org/emacs/TransparentEmacs

#+BEGIN_SRC emacs-lisp
(defun sf/transparency (value)
   "Sets the transparency of the frame window. 0=transparent/100=opaque"
   (interactive "nTransparency Value 0 - 100 opaque:")
   (set-frame-parameter (selected-frame) 'alpha value))
#+END_SRC

Helper functions to toggle =hl-line-mode=.

#+BEGIN_SRC emacs-lisp
  (defun sf/turn-on-hl-line ()
    "Turn on hl-line-mode"
    (interactive)
    (hl-line-mode 1))

  (defun sf/turn-off-hl-line ()
    "Turn off hl-line-mode"
    (interactive)
    (hl-line-mode nil))
#+END_SRC

* Platform issues

** MacOS

The default PATH on MacOS needs some help, particularly if you use
[[https://brew.sh/][Homebrew]].

#+BEGIN_SRC emacs-lisp
  (when (sf/system-type-is-darwin)
    (dolist (path (list "/usr/local/bin" (expand-file-name "~/bin")))
      (progn
        (setenv "PATH" (concat path ":" (getenv "PATH")))
        (add-to-list 'exec-path path))))
#+END_SRC

* Personal information

Set my name. =user-mail-address= is defined in /private.org/.

#+BEGIN_SRC emacs-lisp
(setq user-full-name "Stephen Fromm")
#+END_SRC

Pull in the personalized configuration details.

#+BEGIN_SRC emacs-lisp
(require 'setup-personalized)
#+END_SRC

Pull in information from private module, if it exists.

#+BEGIN_SRC emacs-lisp
(if (file-exists-p (concat user-emacs-directory "site-lisp/sf-private.el"))
  (require 'sf-private))
#+END_SRC

* Packages

#+BEGIN_SRC emacs-lisp
  (defun sf/bootstrap-packages ()
    "Bootstrap packages to install for Emacs."
    (interactive)
    (dolist (package '(
                        ace-window
                        alert
                        all-the-icons
                        all-the-icons-dired
                        async
                        avy
                        boxquote
                        company-jedi
                        counsel
                        dired+
                        elfeed
                        elpy
                        evil
                        git-annex
                        gnus-alias
                        hydra
                        jabber
                        jedi
                        json-mode
                        ledger-mode
                        leuven-theme
                        lua-mode
                        magit
                        magit-annex
                        markdown-mode
                        material-theme
                        org-plus-contrib
                        org-pomodoro
                        ox-reveal
                        ox-twbs
                        paradox
                        pass
                        professional-theme
                        smart-mode-line
                        solarized-theme
                        spacemacs-theme
                        swiper
                        transpose-frame
                        twittering-mode
                        web-mode
                        yaml-mode
                        yasnippet
                        zenburn-theme
                        zone-nyan
                      ))
      (progn (sf/package-install package))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (defun sf/bootstrap ()
    "Bootstrap environment"
    (sf/bootstrap-packages))
#+END_SRC

* Hydra - Making Emacs bindings stick around

[[https://github.com/abo-abo/hydra][Hydra]] is a Emacs package that can be used to tie related commands into a
family of short bindings with a common prefix - aka the Hydra.

Abo Abo has some interesting posts on Hydra that demonstrate its
utility:

- [[http://oremacs.com/2015/02/03/one-hydra-two-hydra/][One Hydra Two Hydra Red Hydra Blue Hydra]]
- [[http://oremacs.com/2015/02/04/pre-hydra-post/][New in Hydra - :pre and :post clauses]]
- [[http://oremacs.com/2015/02/02/colorful-hydrae/][Colorful Hydras]]

This is effectively a building block to build a UI to execute different actions.

#+BEGIN_SRC emacs-lisp
  (use-package hydra
    :ensure t)
#+END_SRC

* Postamble

Finally, offer module for use.

#+BEGIN_SRC emacs-lisp
(provide 'setup-core)
#+END_SRC

* License

This document is licensed under the GNU Free Documentation License
version 1.3 or later (http://www.gnu.org/copyleft/fdl.html).

#+BEGIN_SRC
Copyright (C) 2017 Stephen Fromm

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3
or any later version published by the Free Software Foundation;
with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.

Code in this document is free software: you can redistribute it
and/or modify it under the terms of the GNU General Public
License as published by the Free Software Foundation, either
version 3 of the License, or (at your option) any later version.

This code is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
#+END_SRC
