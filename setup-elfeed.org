#+TITLE: Elfeed: RSS Reader
#+PROPERTY: header-args :tangle ~/.emacs.d/site-lisp/setup-elfeed.el

* Elfeed

[[https://github.com/skeeto/elfeed][Elfeed]] is a web feed (ATOM and RSS) reader for Emacs.

[[https://github.com/skeeto/youtube-dl-emacs][youtube-dl-emacs]] is a package that manages a download queue for [[https://rg3.github.io/youtube-dl/][youtube-dl]].

#+BEGIN_SRC emacs-lisp
  (use-package youtube-dl
    :init (setq youtube-dl-directory "~/annex/Video/youtube"))

  (use-package elfeed
    :ensure elfeed
    :bind (
            :map elfeed-search-mode-map
            ("d" . elfeed-search-youtube-dl)
            ("f" . sf/elfeed-search-toggle-starred)
            ("o" . elfeed-search-mpv)
            ("F" . sf/elfeed-search-starred)
            ("<" . sf/elfeed-search-first-article)
            (">" . sf/elfeed-search-last-article)
            :map elfeed-show-mode-map
            ("d" . elfeed-show-youtube-dl)
            ("f" . sf/elfeed-show-toggle-starred)
            ("o" . elfeed-show-mpv)
            )
    :config
    (progn

      (defun elfeed-search-mpv ()
        "Play the current entry with mpv"
        (interactive)
        (message "url %s" (elfeed-entry-link (car (elfeed-search-selected))))
        (start-process "*elfeed-mpv*" nil "mpv" (elfeed-entry-link (car (elfeed-search-selected)))))

      (defun elfeed-show-mpv ()
        "Play the current entry with mpv"
        (interactive)
        (start-process "*elfeed-mpv*" nil "mpv" (elfeed-entry-link elfeed-show-entry)))

      ;; from skeeto
      ;; https://github.com/skeeto/.emacs.d/blob/master/etc/feed-setup.el
      (defun elfeed-search-youtube-dl ()
        "Download the current entry/entries with youtube-dl"
        (interactive)
        (let ((entries (elfeed-search-selected)))
          (dolist (entry entries)
            (if (null (youtube-dl (elfeed-entry-link entry)
                        :title (elfeed-entry-title entry)))
                  (message "Entry is not a youtube link")
                  (message "Downloading %s" (elfeed-entry-title entry)))
            (elfeed-untag entry 'unread)
            (elfeed-search-update-entry entry)
            (unless (use-region-p) (forward-line)))))

      ;; from skeeto
      ;; https://github.com/skeeto/.emacs.d/blob/master/etc/feed-setup.el
      (defun elfeed-show-youtube-dl ()
        "Download the current entry with youtube-dl"
        (interactive)
        (pop-to-buffer (youtube-dl (elfeed-entry-link elfeed-show-entry))))

      (defun sf/elfeed-search-starred ()
        "Show starred elfeed articles"
        (interactive)
        (elfeed-search-set-filter "@6-months-ago +starred"))

      (defalias 'sf/elfeed-search-toggle-starred (elfeed-expose #'elfeed-search-toggle-all 'starred))

      (defun sf/elfeed-show-toggle-starred ()
        "Toggle starred tag for elfeed article"
        (interactive)
        (sf/elfeed-show-toggle-tag 'starred))

      (defun sf/elfeed-show-toggle-tag (tag)
        "Toggle tag for elfeed article"
        (interactive)
        (if (elfeed-tagged-p tag elfeed-show-entry)
          (elfeed-show-untag tag)
          (elfeed-show-tag tag)))

      (defun sf/elfeed-update ()
        "Update elfeed database"
        (message "Updating elfeed articles...")
        (elfeed-update))

      (defun sf/elfeed-search-first-article ()
        "Go to first message in search"
        (interactive)
        (goto-char (point-min)))

      (defun sf/elfeed-search-last-article ()
        "Go to last message in search"
        (interactive)
        (goto-char (point-max)))

      (defface elfeed-search-starred-title-face
        '((t :foreground "#f77"))
        "Marks a starred Elfeed entry.")
      (push '(starred elfeed-search-starred-title-face) elfeed-search-face-alist)

      (setq elfeed-feeds
        '(("http://codeascraft.com/feed/" devops)
           ("http://endlessparentheses.com/atom.xml" emacs)
           ("http://planet.emacsen.org/atom.xml" emacs)
           ("http://oremacs.com/atom.xml" emacs)
           ("http://pragmaticemacs.com/feed/" emacs)
           ("http://mbork.pl/?action=rss" emacs )
           ("http://www.howardism.org/index.xml" emacs )
           ("http://feeds.feedburner.com/TheKitchinResearchGroup" emacs )
           ("http://sachachua.com/blog/feed" emacs )
           ("http://blog.aaronbieber.com/feed.xml" emacs )
           ("https://www.masteringemacs.org/feed" emacs )
           ("http://karl-voit.at/feeds/lazyblorg-all.atom_1.0.links-and-content.xml" emacs)
           ("http://irreal.org/blog/?feed=rss2" emacs)
           ("https://planet.postgresql.org/rss20.xml" devops postgres )
           ("https://blog.miguelgrinberg.com/feed" devops python )
           ("http://planetpython.org/rss20.xml" devops python )
           ("http://planetsysadmin.com/atom.xml" devops )
           ("https://feeds.feedburner.com/sysadvent" devops )
           ("http://planet.centos.org/atom.xml" linux centos)
           ("http://kernelplanet.org/rss20.xml" linux )
           ("http://planet.freedesktop.org/rss20.xml" linux )
           ("http://devopsreactions.tumblr.com/rss" devops fun)
           ("http://feeds.networklore.com/Networklore" netops )
           ("http://etherealmind.com/feed/" netops)
           ("http://xkcd.com/atom.xml" comics fun)
           ("https://what-if.xkcd.com/feed.atom" fun)
           ("http://americasgreatoutdoors.tumblr.com/rss" fun)
           ("https://www.youtube.com/feeds/videos.xml?user=polygon" youtube)
           )
        url-queue-timeout 30
        elfeed-db-directory (concat user-emacs-directory "user/elfeed")
        )
      ;; create timer to update elfeed
      (setq elfeed-update-timer (run-at-time 180 (* 120 60) 'sf/elfeed-update))
      (dolist (mode '(elfeed-show-mode elfeed-search-mode))
        (evil-set-initial-state mode 'emacs))
      )
    )
#+END_SRC

Finally, offer module for use.

#+BEGIN_SRC emacs-lisp
(provide 'setup-elfeed)
#+END_SRC

* License

This document is licensed under the GNU Free Documentation License
version 1.3 or later (http://www.gnu.org/copyleft/fdl.html).

#+BEGIN_SRC 
Copyright (C) 2017 Stephen Fromm

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3
or any later version published by the Free Software Foundation;
with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.

Code in this document is free software: you can redistribute it
and/or modify it under the terms of the GNU General Public
License as published by the Free Software Foundation, either
version 3 of the License, or (at your option) any later version.

This code is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
#+END_SRC
