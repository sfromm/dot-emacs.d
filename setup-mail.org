#+TITLE: Emacs Mail Configuration
#+PROPERTY: header-args :tangle ~/.emacs.d/site-lisp/setup-mail.el

* Message mode

Set up =message-mode=.  This will kill the buffer after sending an email
and set preferences for message citation and how to forward an
email. For more on configuring Emacs =message-mode=, see the [[https://www.gnu.org/software/emacs/manual/html_mono/message.html][manual]].
Use SMTP for sending email instead of a local sendmail binary.

#+BEGIN_SRC emacs-lisp
  (setq
    message-kill-buffer-on-exit t
    message-citation-line-format "On %a, %Y-%m-%d at %T %z, %N wrote:"
    message-citation-line-function (quote message-insert-formatted-citation-line)
    message-make-forward-subject-function (quote message-forward-subject-fwd)
    message-signature t
    message-signature-file "~/.signature"
    message-send-mail-function 'smtpmail-send-it
    mm-text-html-renderer 'shr
    shr-inhibit-images nil
    mime-view-text/html-previewer 'shr
    mm-inline-text-html-with-images t
    mail-from-style 'angles
    )
#+END_SRC

Enable certain modes for *message-mode*:

#+BEGIN_SRC emacs-lisp
  (add-hook 'message-mode-hook 'footnote-mode)
  (add-hook 'message-mode-hook 'turn-on-flyspell)
  (add-hook 'message-mode-hook #'yas-minor-mode)
  (add-hook 'message-mode-hook
    'turn-on-auto-fill
    (lambda()
      (auto-fill-mode t)
      (setq fill-column 72)
      (setq mail-header-separator "")
      )
    )
#+END_SRC

* Sending email

The following configures default SMTP settings for =smtpmail=.

#+BEGIN_SRC emacs-lisp
  (use-package smtpmail
    :defer t
    :config
    (setq
      smtpmail-stream-type 'ssl
      smtpmail-default-smtp-server sf-custom/smtp-server-work
      smtpmail-smtp-server sf-custom/smtp-server-work
      smtpmail-smtp-service 465
      smtpmail-smtp-user sf-custom/smtp-user-work
      smtpmail-queue-dir (expand-file-name (concat user-emacs-directory "user/queue"))
      ))
#+END_SRC

Be sure to use an encrypted /authinfo/ file.

#+BEGIN_SRC emacs-lisp
(setq smtpmail-auth-credentials "~/.authinfo.gpg")
#+END_SRC

Use /dired/ to attach files to messages.

#+BEGIN_SRC emacs-lisp
(require 'gnus-dired)
(add-hook 'dired-mode-hook 'turn-on-gnus-dired-mode)
#+END_SRC

* Notmuch Emacs MUA

[[http://notmuchmail.org/][notmuch]] is basically a mail indexer.  It helps you to better tame your
inbox with search, tagging, and other functions.  There is a CLI
interface to interact with your email in Maildir format.  Or, you can
use the Emacs notmuch client front-end.

Installation is basically:

#+BEGIN_EXAMPLE
$ brew install notmuch
#+END_EXAMPLE

The following the configures the emacs interface to notmuch.

#+BEGIN_SRC emacs-lisp
  (use-package notmuch
    :ensure notmuch
    :init
    (progn
      (setq
        notmuch-archive-tags '("-inbox" "-unread" "-trash" "+archive")
        notmuch-crypto-process-mime t
        notmuch-fcc-dirs sf-custom/fcc-dirs
        notmuch-hello-thousands-separator ","
        notmuch-search-oldest-first nil
        notmuch-show-part-button-default-action 'notmuch-show-view-part
        notmuch-saved-searches
        '(
           (:name "Inbox"           :key "i" :query "tag:inbox and not tag:archive")
           (:name "Flagged"         :key "f" :query "tag:flagged")
           (:name "Today"           :key "t" :query "date:24h.. and not ( tag:archive or tag:sent )")
           (:name "3 days"          :key "3" :query "date:3d..  and not ( tag:archive or tag:sent )")
           (:name "14 days"         :key "4" :query "date:14d.. and not ( tag:archive or tag:sent ) ")
           (:name "Old messages"    :key "o" :query "date:..14d and not ( tag:archive or tag:sent ) and ( folder:Work/INBOX or folder:Work/incoming ) ")
           (:name "Needs attention" :key "!" :query "folder:Work/INBOX and ( tag:copyright or tag:flagged )")
           (:name "Sent"            :key "s" :query "folder:Work/Sent or tag:sent")
           (:name "Bulk"            :key "b" :query "folder:Work/incoming and not tag:archive")
           (:name "Attachments"     :key "A" :query "tag:attachment")
           (:name "Meeting Invites" :key "c" :query "mimetype:text/calendar")
           )
        )
      (add-to-list 'auto-mode-alist '("notmuch-raw-id" . markdown-mode))
      (add-hook 'notmuch-hello-mode-hook 'sf/nolinum)
      (add-hook 'notmuch-show-hook '(lambda () (setq show-trailing-whitespace nil)))
      (dolist (mode '(notmuch-search notmuch-show notmuch-tree-mode notmuch-help notmuch-message-mode))
        (evil-set-initial-state mode 'emacs))
      )
    :config
    (progn
      (define-key notmuch-show-mode-map (kbd "D")
        (lambda ()
          "mark message for trash"
          (interactive)
          (notmuch-show-add-tag '("+trash" "-inbox" "-unread" "-archive"))
          (unless (notmuch-show-next-open-message)
            (notmuch-show-next-thread t))))
      (define-key notmuch-search-mode-map (kbd "D")
        (lambda ()
          "mark thread for trash"
          (interactive)
          (notmuch-search-tag (list "+trash" "-inbox" "-unread" "-archive"))
          (notmuch-search-next-thread )))
      (define-key notmuch-show-mode-map (kbd "J")
        (lambda ()
          "mark message as junk"
          (interactive)
          (notmuch-show-add-tag (list "+bulk" "+trash" "-inbox" "-unread" "-archive"))
          (unless (notmuch-show-next-open-message)
            (notmuch-show-next-thread t))))
      (define-key notmuch-search-mode-map (kbd "J")
        (lambda ()
          "mark thread as junk"
          (interactive)
          (notmuch-search-tag (list "+bulk" "+trash" "-inbox" "-unread" "-archive"))
          (notmuch-search-next-thread )))
      (define-key notmuch-show-mode-map (kbd "F")
        (lambda ()
          "toggle message as flagged"
          (interactive)
          (if (member "flagged" (notmuch-show-get-tags))
            (notmuch-show-remove-tag (list "-flagged"))
            (notmuch-show-add-tag (list "+flagged")))))
      (define-key notmuch-search-mode-map (kbd "F")
        (lambda ()
          "toggle thread as flagged"
          (interactive)
          (if (member "flagged" (notmuch-search-get-tags))
            (notmuch-search-tag (list "-flagged"))
            (notmuch-search-tag (list "+flagged")))))
      (define-key notmuch-show-mode-map (kbd "M")
        (lambda ()
          "toggle message as muted"
          (interactive)
          (if (member "mute" (notmuch-show-get-tags))
            (notmuch-show-remove-tag (list "-mute"))
            (notmuch-show-add-tag (list "+mute")))))
      (define-key notmuch-search-mode-map (kbd "M")
        (lambda ()
          "toggle thread as muted"
          (interactive)
          (if (member "mute" (notmuch-search-get-tags))
            (notmuch-search-tag (list "-mute"))
            (notmuch-search-tag (list "+mute")))))
      (define-key notmuch-show-mode-map (kbd "b")
        (lambda (&optional address)
          "Bounce the current message"
          (interactive "sBounce to: ")
          (notmuch-show-view-raw-message)
          (message-resend address)))
      (define-key notmuch-show-mode-map   (kbd "TAB") 'notmuch-show-toggle-message)
      (define-key notmuch-search-mode-map (kbd "g") 'notmuch-refresh-this-buffer)
      (define-key notmuch-hello-mode-map  (kbd "g") 'notmuch-refresh-this-buffer)
      (defun sf/notmuch-toggle-remote ()
        "Toggle whether to use notmuch remotely"
        (interactive)
        (if (string= notmuch-command "notmuch")
          (progn
            (setq notmuch-command "notmuch-remote.sh")
            (message "switching to remote notmuch"))
          (progn
            (setq notmuch-command "notmuch")
            (message "switching to local notmuch"))))
      ))
#+END_SRC

A series of helpers for forwarding emails.

#+BEGIN_SRC emacs-lisp
  (defun sf/notmuch-attach-email (&optional path)
    "Attach a RFC822 email and give it a sensible file name"
    (interactive "sMessage path: ")
    (let ((newpath (expand-file-name (concat "~/tmp/" (number-to-string (truncate (float-time))) ".eml"))))
      (copy-file path newpath)
      (mml-attach-file newpath "message/rfc822" "" "attachment")))

  (defun sf/mail-forward-abuse-complaint ()
    "Forward an abuse complaint to responsible party"
    (interactive)
    (notmuch-show-forward-message)
    (message-goto-body)
    (yas-expand-snippet (yas-lookup-snippet "abuse-template"))
    (message-add-header (concat "Cc: " sf-custom/abuse-mail-cc))
    (message-goto-to))

  (defun sf/mail-forward-infringement-complaint ()
    "Forward a infringement complaint to responsible party"
    (interactive)
    (notmuch-show-forward-message)
    (message-goto-body)
    (yas-expand-snippet (yas-lookup-snippet "infringement-template"))
    (message-add-header (concat "Cc: " sf-custom/abuse-mail-cc))
    (message-goto-to))

  (defun sf/mail-forward-spam-complaint ()
    "Forward a spam complaint to responsible party"
    (interactive)
    (notmuch-show-forward-message)
    (message-goto-body)
    (yas-expand-snippet (yas-lookup-snippet "spam-template"))
    (message-add-header (concat "Cc: " sf-custom/abuse-mail-cc))
    (message-goto-to))

#+END_SRC

Other email helpers.

#+BEGIN_SRC emacs-lisp
  (defun sf/mail-toggle-compose-new-frame ()
    "Toggle whether to compose email in new frame"
    (interactive)
    (cond ((eq notmuch-mua-compose-in 'current-window)
            setq notmuch-mua-compose-in 'new-frame)
          ((eq notmuch-mua-compose-in 'new-frame)
            setq notmuch-mua-compose-in 'current-window)))

  (defun sf/mail-save-all-attachments (&optional msg)
    "Save all attachments in `msg' to a sub-directory
    in `mu4e-attachment-dir' location.  The sub-directory is
    derived from the subject of the email message."
    (interactive)
    (let* ((msg (or msg (mu4e-message-at-point)))
            (subject (message-wash-subject (notmuch-show-get-subject)))
            (attachdir (concat mu4e-attachment-dir "/" subject))
            (count (hash-table-count mu4e~view-attach-map)))
      (if (> count 0)
        (progn
          (mkdir attachdir t)
            (dolist (num (number-sequence 1 count))
              (let* ((att (mu4e~view-get-attach msg num))
                      (fname (plist-get att :name))
                      (index (plist-get att :index))
                      fpath)
                (setq fpath (expand-file-name (concat attachdir "/" fname)))
                (mu4e~proc-extract
                  'save (mu4e-message-field msg :docid)
                  index mu4e-decryption-policy fpath))))
          (message "Nothing to extract"))))
#+END_SRC

Put together a hydra to make it easy to access the functionality.

#+BEGIN_SRC emacs-lisp
  (defhydra sf/hydra-email (:color blue)
      "
    _f_ Forward email         _N_ Toggle compose New frame
    _A_ Forward Abuse report  _S_ Forward Spam report
    _I_ Forward Infringement  _e_ Extract all attachments
    "
      ("f" notmuch-show-forward-message)
      ("A" sf/mail-forward-abuse-complaint)
      ("I" sf/mail-forward-infringement-complaint)
      ("S" sf/mail-forward-spam-complaint)
      ("N" sf/mail-toggle-compose-new-frame)
      ("e" sf/mu4e-save-all-attachments))

  (global-set-key (kbd "C-c m") 'sf/hydra-email/body)
#+END_SRC

Last, but not least, enable linking to messages from org-mode.

#+BEGIN_SRC emacs-lisp
  (use-package org-notmuch)
#+END_SRC

* Potpourri

** Multiple identities

For some emacs mail environments, you use =gnus-alias.el= to manage
multiple accounts (aka identities) for sending email via Emacs.  A good
portion of this is based on [[http://notmuchmail.org/emacstips/#index17h2][notmuch emacstips]].  You can find
=gnus-alias.el= on [[http://www.emacswiki.org/emacs/gnus-alias.el][emacswiki]] (source) and ([[https://www.emacswiki.org/emacs/GnusAlias][documentation]]).  This is
particularly helpful when you need to set =X-Message-SMTP-Method= for
per account SMTP servers (see [[https://gnu.org/software/emacs/manual/html_node/message/Mail-Variables.html#Mail-Variables][documentation]]).

=gnus-alias-identity= takes a lot of arguments.  They are briefly
described below.

1. Account nickname
2. Other identity it may refer to
3. Sender address
4. Organization header
5. Extra headers
6. Extra body text
7. Signature file

#+BEGIN_EXAMPLE
(setq gnus-alias-identity alist
  '(("gmail" nil "Joe Smith <jsmith@example.net>" nil nil nil nil))
  )
#+END_EXAMPLE

#+BEGIN_SRC emacs-lisp
  (use-package gnus-alias
    :ensure t
    :init
    (progn
      (setq
        gnus-alias-default-identity "work"
        gnus-alias-identity-alist sf-custom/gnus-alias-alist
        gnus-alias-identity-rules sf-custom/gnus-alias-identity-rules
        )
      (add-hook 'message-setup-hook 'gnus-alias-determine-identity)
      )
    )
#+END_SRC

Finally, offer module for use.

#+BEGIN_SRC emacs-lisp
(provide 'setup-mail)
#+END_SRC

* License

This document is licensed under the GNU Free Documentation License
version 1.3 or later (http://www.gnu.org/copyleft/fdl.html).

#+BEGIN_SRC 
Copyright (C) 2017 Stephen Fromm

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3
or any later version published by the Free Software Foundation;
with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.

Code in this document is free software: you can redistribute it
and/or modify it under the terms of the GNU General Public
License as published by the Free Software Foundation, either
version 3 of the License, or (at your option) any later version.

This code is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
#+END_SRC
