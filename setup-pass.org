#+TITLE: Password Management
#+PROPERTY: header-args :tangle ~/.emacs.d/site-lisp/setup-pass.el

* GnuPG

[[https://www.gnupg.org/][GnuPG]] is a /complete and free implementatoin of the OpenPGP standard/ as
defined by [[https://www.ietf.org/rfc/rfc4880.txt][RFC4880]].  There is quite a bit of documentation on the
subject of GPG, including:

- https://www.gnupg.org/documentation/index.html
- https://www.masteringemacs.org/article/keeping-secrets-in-emacs-gnupg-auth-sources

** Install GnuPG

If you are on linux, *GnuPG* is probably already installed.  If not ...

#+BEGIN_SRC sh :tangle no :dir /sudo::
  if [ ! -x /usr/bin/pass ]; then
      if [ -e /etc/fedora-release ]; then
          dnf -y install pass
      elif [ -e /etc/debian-release ]; then
          apt-get -y install pass
      fi
  fi
#+END_SRC

However if you are on MacOS, the following snippet will help.  It
installs gnupg and pinentry-mac.  It also sets a =gpg2= symlink pointing
to the =gpg= binary.

#+BEGIN_SRC sh :tangle no
brew install gnupg
brew install pinentry-mac
ln -s /usr/local/bin/gpg /usr/local/bin/gpg2
#+END_SRC

For whatever reason, Emacs needs extra help to use gnupg on MacOS.  This
manages to do the trick.

#+BEGIN_SRC emacs-lisp
  (when (sf/system-type-is-darwin)
    (custom-set-variables '(epg-gpg-program  "/usr/local/bin/gpg"))
    (setq epa-pinentry-mode 'loopback)
    )
#+END_SRC

** Creating a key

You create a GPG key pair with the following.  Be sure to use a passphrase.

#+BEGIN_EXAMPLE
$ gpg --gen-key
#+END_EXAMPLE

You can then list the secret keys with the following:

#+BEGIN_EXAMPLE
$ gpg --list-secret-keys
#+END_EXAMPLE

Alternatively, you can run =M-x epa-list-secret-keys=.  

** Exporting / Importing a key

You can export your secret key to a file:

#+BEGIN_EXAMPLE
$ gpg --armor --export-secret-keys Stephen Maturin > maturin.asc
#+END_EXAMPLE

To then import the key on another host, import and then trust the key.

#+BEGIN_EXAMPLE
$ gpg --import maturin.asc
$ gpg --edit-key "Stephen Maturin"
gpg> trust
Your decision? 5
Do you really want to set this key to ultimate trust? (y/N) y
gpg> quit
#+END_EXAMPLE

** Keybase

Resources:
- https://blog.scottlowe.org/2017/09/06/using-keybase-gpg-macos/
- https://www.keybits.net/post/import-keybase-private-key/
- https://www.ahmadnassri.com/blog/github-gpg-keybase-pgp/

[[https://keybase.io][Keybase]] is an interesting website and application that leverages PGP.
In the event you create your key on Keybase's website, the following
steps will import the secret and public key into your keyring.

#+BEGIN_SRC sh :tangle no
keybase pgp export --secret | gpg --allow-secret-key-import --import
keybase pgp export | gpg --import
#+END_SRC

You will then want to /trust/ the newly imported keys.

You should see your key when you run =gpg --list-secret-keys=.

* Emacs 

** Resources

- [[http://emacs-fu.blogspot.com/2011/02/keeping-your-secrets-secret.html][Keeping your secrets secret]] A useful resource for loading encrypted
  libraries.  Not something I am using at this time.

** EasyPG Assistant

[[https://www.gnu.org/software/emacs/manual/epa.html][EasyPG Assistant]] (aka /epa/) is an Emacs user interface to GPG.  

| Command                | Description                               |
|------------------------+-------------------------------------------|
| =epa-list-keys=        | List all the keys from the public keyring |
| =epa-list-secret-keys= | List all the keys from the secret keyring |
| =epa-decrypt-file=     | Decrypt current file                      |
| =epa-decrypt-region=   | Decrypt current region                    |
| =epa-encrypt-file=     | Encrypt current file                      |
| =epa-encrypt-region=   | Encrypt current region                    |
| =epa-insert-keys=      | Insert one or more keys into buffer       |
| =epa-sign-file=        | Sign the current file                     |
| =epa-sign-region=      | Sign the current region                   |
| =epa-verify-file=      | Verify the current file                   |
| =epa-verify-region=    | Verify the current region                 |

** Authinfo

- https://www.emacswiki.org/emacs/GnusAuthinfo
- https://www.masteringemacs.org/article/keeping-secrets-in-emacs-gnupg-auth-sources

Emacs can then read password information with the =auth-source=
package.  =auth-source= supports multiple backends.  The default is
=~/.authinfo=, which can be encrypted as =~/.authinfo.gpg=.  The format
of this file is:
 
#+BEGIN_EXAMPLE
machine HOST login NAME password VALUE port NUMBER
#+END_EXAMPLE

#+BEGIN_SRC emacs-lisp
(use-package auth-source
  :init
  (progn
    (setq auth-source-debug t)))
#+END_SRC

It helps to have a utility to extract account information from
/authinfo/ that other programs can call.

#+BEGIN_SRC python :tangle ~/bin/authinfo-query.py :shebang #!/usr/bin/python
  # Written by Stephen Fromm <sfromm gmail com>
  # (C) 2013 University of Oregon
  #
  # This program is free software; you can redistribute it and/or modify
  # it under the terms of the GNU General Public License as published by
  # the Free Software Foundation; either version 2 of the License, or
  # (at your option) any later version.
  #
  # This program is distributed in the hope that it will be useful, but
  # WITHOUT ANY WARRANTY; without even the implied warranty of
  # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  # General Public License for more details.
  #
  # You should have received a copy of the GNU General Public License
  # along with this program; if not, write to the Free Software
  # Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
  # 02110-1301, USA.

  import re, os, sys

  def get_password_authinfo(login, machine, port):
      s = "machine %s login %s port %s password \"(.*)\"\n" % (machine, login, port)
      p = re.compile(s)
      authinfo = os.popen("gpg -q --use-agent --no-tty -d ~/.authinfo.gpg").read()
      try:
          return p.search(authinfo).group(1)
      except:
          return ""

  def get_password_pass(login, machine, port):
      data = os.popen("pass grep {}".format(machine))

  if __name__ == '__main__':
      if len(sys.argv) == 4:
          # Expects:  login, hostname, port/service
          sys.stdout.write(get_password_authinfo(sys.argv[1], sys.argv[2], sys.argv[3]))
#+END_SRC

* Password Store

- https://www.passwordstore.org/
- [[https://git.zx2c4.com/password-store/about/#EXTENDED%20GIT%20EXAMPLE][Detailed Example]]
- https://git.zx2c4.com/password-store/tree/contrib/emacs

=password-store= (aka =pass=) is a password manager that uses GPG to
encrypt files where the filename is the title of the website or resource
that requires the password.  These can then be organized into a
meaningful folder hierarchy.

You need a password manager.  It is probably the only way to ensure a
unique and pseudo-random password for all the different websites and
services that one may take advantage of.  At the same time, it isn't
clear to me that one can trust cloud-based password managers.  The
attack surface is probably quite a bit larger than one might imagine.
That implies using something like =pass= where I have complete control
over the data.

There's a plugin for Chrome ([[https://github.com/dannyvankooten/browserpass#readme][Browserpass]]) and Firefox ([[https://github.com/nwallace/passff#readme][passff]]).  And, of
course, one for emacs ([[https://git.zx2c4.com/password-store/tree/contrib/emacs][password-store]]).  Interestingly, it also has one
for Windows ([[https://github.com/mbos/Pass4Win#readme][Pass4Win]]).

The author recommends storing a single password per entry and use the
multi-line functionality of =pass=.  From the author:

#+BEGIN_QUOTE
One approach is to use the multi-line functionality of pass (--multiline
or -m in insert), and store the password itself on the first line of the
file, and the additional information on subsequent lines.

This is the preferred organzational scheme used by the author. 
#+END_QUOTE

An example entry might look like:

#+BEGIN_EXAMPLE
Yw|ZSNH!}z"6{ym9pI
URL: *.amazon.com/*
Username: AmazonianChicken@example.com
Secret Question 1: What is your childhood best friend's most bizarre superhero fantasy? Oh god, Amazon, it's too awful to say...
Phone Support PIN #: 84719
#+END_EXAMPLE

First, install =pass= if not already present.

#+BEGIN_SRC sh :dir /sudo:: :results silent :tangle no
  if [ ! -x /usr/bin/pass ]; then
      if [ -e /etc/fedora-release ]; then
          dnf -y install pass
      elif [ -e /etc/debian-release ]; then
          apt-get -y install pass
      fi
  fi
#+END_SRC

Next, create a GPG key for the password store and then initialize.

#+BEGIN_SRC sh :results silent :tangle no
gpg2 --gen-key 
pass init "Password Store"
pass git init
#+END_SRC

** Password Store and Emacs

The following will pull in support for Emacs.

#+BEGIN_SRC emacs-lisp
  (use-package password-store
    :ensure t
    :bind
    ("C-c p" . hydra-password-store/body)
    :config
    (progn
      (setq password-store-password-length 16)
      (with-eval-after-load "hydra"
        (defhydra hydra-password-store ()
          "
  _c_: copy,   _e_: edit,  _n_: new
  _C_: commit, _F_: pull,  _p_: push
  "
          ("c" password-store-copy)
          ("e" password-store-edit)
          ("n" password-store-generate)
          ("C" (lambda () (interactive) (async-shell-command "pass git commit -a -m update")))
          ("F" (lambda () (interactive) (async-shell-command "pass git pull")))
          ("p" (lambda () (interactive) (async-shell-command "pass git push")))
          )
        )
      )
    )
  (use-package auth-password-store
    :after auth-source
    :init
    (progn
      (setq auth-sources '(password-store))))
  (provide 'setup-pass)
#+END_SRC

** Password Store and Firefox

There are a couple extensions that support [[https://www.mozilla.org/en-US/firefox/][Firefox]].  One of those is
[[https://github.com/passff/passff][passff]].  The installation [[https://github.com/passff/passff/blob/master/docs/INSTALLATION.md][documentation]] describes how to install the
host application, something the extension depends on.  There's the
option to pipe something from =curl= into =bash= (yuck) or clone the
repository and install by hand.

#+BEGIN_SRC sh :results silent :tangle no :dir ~/src
git clone https://github.com/passff/passff.git
cd passff/src/host
./install_host_app.sh --local firefox
#+END_SRC

This should install the host application to:
/~/.mozilla/native-messaging-hosts/passff.json/ 

* License

This document is licensed under the GNU Free Documentation License
version 1.3 or later (http://www.gnu.org/copyleft/fdl.html).

#+BEGIN_SRC 
Copyright (C) 2017 Stephen Fromm

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3
or any later version published by the Free Software Foundation;
with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.

Code in this document is free software: you can redistribute it
and/or modify it under the terms of the GNU General Public
License as published by the Free Software Foundation, either
version 3 of the License, or (at your option) any later version.

This code is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
#+END_SRC
