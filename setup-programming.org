#+TITLE: Support for programming and edting
#+PROPERTY: header-args :tangle ~/.emacs.d/site-lisp/setup-programming.el

* Basics

Show matching parenthesis.

#+BEGIN_SRC emacs-lisp
(show-paren-mode t)
#+END_SRC

I want a final newline to be added to a file when it is about to be
saved.

#+BEGIN_SRC emacs-lisp
  (setq-default require-final-newline t)
#+END_SRC

For basic =text-mode=, Use auto-fill and set a column width to 72.

#+BEGIN_SRC emacs-lisp
(add-hook 'text-mode-hook 'turn-on-auto-fill)
(add-hook 'text-mode-hook
  '(lambda() (set-fill-column 72)))
#+END_SRC

Set up company-mode for auto-completion.

#+BEGIN_SRC emacs-lisp
(use-package company)
#+END_SRC

* Flycheck - Syntax checking

Set up [[http://www.flycheck.org/en/latest/index.html][flycheck]] for on the fly syntax checking.

#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :ensure t
  :diminish flycheck-mode
  :init (global-flycheck-mode))
#+END_SRC

* Lisp

A default offset of 2 seems to make sense for lisp.

#+BEGIN_SRC emacs-lisp
(setq lisp-indent-offset 2)
(evil-set-initial-state 'lisp-mode 'emacs)
#+END_SRC

[[https://www.emacswiki.org/emacs/ElDoc][ElDoc]] shows the argument list of the function call you are currently writing in the echo area.

#+BEGIN_SRC emacs-lisp
(use-package eldoc
  :diminish eldoc-mode
  :init
  (add-hook 'emacs-lisp-mode-hook #'eldoc-mode)
  (add-hook 'lisp-interaction-mode-hook #'eldoc-mode)
  :config
  (setq eldoc-idle-delay 0.3))
#+END_SRC

* Lua

#+BEGIN_SRC emacs-lisp
  (use-package lua-mode
    :ensure t)
#+END_SRC

* Markdown

Help Emacs grok when to trigger /markdown-mode/ when editing certain
files.

This contains some helpers for creating tables in Github-Flavored
Markdown (GFM) with /orgtbl-mode/.  To convert to a GFM table, use *C-c
C-c* to create (or update) the table.  This was taken from [[http://emacs.stackexchange.com/questions/4276/correct-markdown-format-tables-with-orgtbl-mode][this]]
stackexchange.

#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :ensure t
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
            ("\\.md\\'" . markdown-mode)
            ("\\.markdown\\'" . markdown-mode))
    :init
    (defun orgtbl-to-gfm (table params)
    "Convert the Orgtbl mode TABLE to GitHub Flavored Markdown."
    (let* ((alignment (mapconcat (lambda (x) (if x "|--:" "|---"))
                     org-table-last-alignment ""))
       (params2
        (list
         :splice t
         :hline (concat alignment "|")
         :lstart "| " :lend " |" :sep " | ")))
      (orgtbl-to-generic table (org-combine-plists params2 params))))
    (defun sf/insert-org-to-md-table (table-name)
      "Helper function to create markdown and orgtbl boilerplate"
      (interactive "*sEnter table name: ")
      (insert "<!---
  ,#+ORGTBL: SEND " table-name " orgtbl-to-gfm

  -->
  <!--- BEGIN RECEIVE ORGTBL " table-name " -->
  <!--- END RECEIVE ORGTBL " table-name " -->")
      (previous-line)
      (previous-line)
      (previous-line))
    )
#+END_SRC

* Python

Pull in support for [[https://www.python.org][Python]].  See [[file:emacs-python.org][emacs-python.org]] ...

#+BEGIN_SRC emacs-lisp
(require 'setup-python)
#+END_SRC

* Shell scripts

Also turn on *linum-mode* for shell scripts.

#+BEGIN_SRC emacs-lisp
(add-hook 'shell-script-mode 'linum-mode)
(add-hook 'shell-script-mode 'sf/whitespace)
#+END_SRC

* YAML

A helper mode when editing [[http://yaml.org/][YAML]] files.

#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :ensure t
    :config
    (progn
      (setq yaml-indent-offset 2)
      (add-hook 'yaml-mode-hook 'linum-mode)
      (add-hook 'yaml-mode-hook 'sf/whitespace)
      )
    )
#+END_SRC

* JSON

A helper mode when editing [[www.json.org][JSON]].

#+BEGIN_SRC emacs-lisp
  (use-package json-mode
    :ensure t
    :config
    (progn
      (add-hook 'json-mode-hook 'linum-mode)
      (add-hook 'json-mode-hook 'sf/whitespace)
      )
    )
#+END_SRC

* Module boilerplate

Finally, offer module for use.

#+BEGIN_SRC emacs-lisp
(provide 'setup-programming)
#+END_SRC

* License

This document is licensed under the GNU Free Documentation License
version 1.3 or later (http://www.gnu.org/copyleft/fdl.html).

#+BEGIN_SRC 
Copyright (C) 2017 Stephen Fromm

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3
or any later version published by the Free Software Foundation;
with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.

Code in this document is free software: you can redistribute it
and/or modify it under the terms of the GNU General Public
License as published by the Free Software Foundation, either
version 3 of the License, or (at your option) any later version.

This code is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
#+END_SRC
